LAF include STR_VAR locbase=caster_shared file=caster_shared.tph END
LAF include STR_VAR locbase=priest file=spell_swaps.tph END

//////////////////////////////////////////////////////////////////////////////////////////////////////
/////          Enforce being a priest
///////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION enforce_priest
     STR_VAR filename=""
             arguments=""
BEGIN
   INNER_ACTION BEGIN
      OUTER_SPRINT type priest
      OUTER_SPRINT component_loc priest
      LAUNCH_ACTION_MACRO read_in_spells_per_level
      LAUNCH_ACTION_MACRO read_in_spell_choices
      LAUNCH_ACTION_MACRO read_in_individual_overrides
      ACTION_IF !VARIABLE_IS_SET priest_tra_loaded BEGIN
           LOAD_TRA "%scs_tra_loc%/english/priest.tra" "%scs_tra_loc%/%LANGUAGE%/priest.tra"
      END

   END
   LPF determine_stat STR_VAR stat=wisdom RET wisdom=value END
   LPF initialise_enforce_caster STR_VAR filename type arguments RET class race alignment game spells_are_bg1 modify_level kitdata script_required=script END
   LPF find_priest_type STR_VAR class alignment kitdata filename RET class kit castertype fighter spell_list spell_list_defensive END
   LPF get_caster_level INT_VAR modify_level STR_VAR type=priest castertype filename RET level END
   LPF allocate_priest_spells INT_VAR level spells_are_bg1 fighter refinements wisdom STR_VAR class kit race filename spell_list spell_list_defensive RET spells level_seven_max spell_turn_list END
   LPF check_ini STR_VAR ini=no_swift_shapeshift RET no_swift_shapeshift=value END
   LPF determine_caster_script_name STR_VAR filename prefix="pr" RET script END
   LPF minimum_healing_level INT_VAR level RET minimum_healing_level END
   LPF build_priest_script INT_VAR level level_seven_max no_swift_shapeshift minimum_healing_level STR_VAR filename kit race script spells castertype spell_turn_list END
   LPF strip_scs_scripts END
   LPF CRE_insert_script_low STR_VAR arguments= ~%script%~ END
   PATCH_IF !no_swift_shapeshift BEGIN
      LPF swift_shapeshift_npc INT_VAR level STR_VAR kit class spells END
   END
END




//////////////////////////////////////////////////////////////////////////////////////////////////////
/////          Get priest type
///////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION find_priest_type
       STR_VAR class=""
               kitdata=""
               alignment=""
               filename=""
       RET castertype
           class
           kit
           spell_list
           spell_list_defensive
           fighter
BEGIN
      PATCH_MATCH ~%class%~ WITH
      DRUID FIGHTER_DRUID DRUID_MAGE BEGIN
         SPRINT spell_list_defensive druid
         SPRINT castertype druid
         TO_LOWER kitdata
         PATCH_MATCH ~%kitdata%~ WITH
         avenger beastfriend BEGIN
            SPRINT spell_list avenger
            SPRINT kit avenger
         END
         shapeshifter BEGIN
            SPRINT spell_list druid
            SPRINT kit shapeshifter
         END
         DEFAULT
            SPRINT spell_list druid
            SPRINT kit druid
         END
         PATCH_IF ~%class%~ STRING_EQUAL_CASE FIGHTER_DRUID BEGIN
            SET fighter=1
         END ELSE BEGIN
            SET fighter=0
         END
      END
      DEFAULT
         SPRINT castertype cleric
         SPRINT spell_list_defensive cleric
         PATCH_MATCH ~%alignment%~ WITH
         LAWFUL_EVIL NEUTRAL_EVIL CHAOTIC_EVIL BEGIN
             SPRINT spell_list cleric_evil
             SPRINT kit cleric_evil
         END
         LAWFUL_GOOD NEUTRAL_GOOD CHAOTIC_GOOD BEGIN
             SPRINT spell_list cleric_good
             SPRINT kit cleric_good
         END
         DEFAULT
             SPRINT spell_list cleric_neutral
             SPRINT kit cleric_neutral
         END
         PATCH_IF ~%class%~ STRING_EQUAL_CASE FIGHTER_CLERIC BEGIN
            SET fighter=1
         END ELSE BEGIN
            SET fighter=0
         END
      END
      PATCH_MATCH "%class%" WITH
      cleric_mage cleric_thief innocent flaming_fist BEGIN
         SPRINT class cleric
      END
      druid_mage BEGIN
         SPRINT class druid
      END
      DEFAULT
      END
END


//////////////////////////////////////////////////////////////////////////////////////////////////////
/////          Build a priest script
///////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION build_priest_script
      INT_VAR prebuff=1 level_seven_max=99 no_swift_shapeshift=0 minimum_healing_level=1
      STR_VAR filename="" script="" kit="" race="" filename="" spells="" castertype="" spell_turn_list=""
BEGIN
     ACTION_IF !VARIABLE_IS_SET difficulty_variable BEGIN
               LAF define_difficulty STR_VAR type=priest RET difficulty_variable END
               LAF define_difficulty STR_VAR type=priest_prep RET prep_difficulty_variable=difficulty_variable END
     END
     LAM read_in_instant_prebuff_spells
     LAF find_priest_script_base INT_VAR level STR_VAR kit race castertype RET base variables END
     OUTER_SPRINT scriptname "%script%"
     ACTION_IF debug_variable=2 BEGIN
        LAF warning STR_VAR warning= ~Trying to compile priest base script %base% with variables %variables%~ END
     END
     OUTER_SPRINT variables_here "%variables%"
     ACTION_TO_UPPER filename
     ACTION_IF VARIABLE_IS_SET $override("boolean" "priest" "%filename%") BEGIN
        OUTER_SPRINT booleans_extra $override("boolean" "priest" "%filename%")
     END ELSE BEGIN
        OUTER_SPRINT booleans_extra ""
     END
     ACTION_IF VARIABLE_IS_SET $override("variable" "priest" "%filename%") BEGIN
        OUTER_SPRINT variables_extra $override("variable" "priest" "%filename%")
        OUTER_SPRINT variables_extra "&%variables_extra%"
     END ELSE BEGIN
        OUTER_SPRINT variables_extra ""
     END
     ACTION_IF !no_swift_shapeshift BEGIN
        OUTER_SPRINT variables_extra "%variables_extra%&ImprovedShapeshift=True"
     END
     ACTION_IF debug_variable=2 BEGIN
        PRINT "variables:%variables_here%%variables_extra%"
        PRINT "spells: %spells%"
     END
     OUTER_WHILE "%spell_turn_list%" STRING_COMPARE "" BEGIN
        LAF return_first_entry STR_VAR list="%spell_turn_list%" RET entry spell_turn_list=list END
        OUTER_SET "%entry%_SPELLTURN"=1
     END
     LAF ssl_to_bcs STR_VAR variables="%variables_here%%variables_extra%" script="%base%" location=~ssl/main~ locbase=priest rename_to=~%scriptname%~ booleans="%spells% %booleans_extra%" END
END

DEFINE_PATCH_FUNCTION build_priest_script
     INT_VAR level=1 level_seven_max=99 no_swift_shapeshift=0 minimum_healing_level=0
     STR_VAR script="" kit="" race="" filename="" spells="" castertype=""  spell_turn_list=""
BEGIN
   INNER_ACTION BEGIN
      LAF build_priest_script INT_VAR level level_seven_max no_swift_shapeshift STR_VAR script kit race filename spells castertype spell_turn_list END
   END
END

//////////////////////////////////////////////////////////////////////////////////////////////////////
/////          Find the base details for a script
///////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION find_priest_script_base
      INT_VAR level=1
      STR_VAR kit=""
              race=""
              castertype=""
      RET base
          variables
BEGIN
      SET warning=0
      PATCH_MATCH "%kit%" WITH
         cleric_evil cleric_good cleric_neutral BEGIN
                SPRINT base dw#priest
                SPRINT priesttype standard_priest
                SPRINT variables "%variables%&priest_melee_choice=standard_priest"
         END
         druid shapeshifter BEGIN
                SPRINT base dw#priest
                SPRINT priesttype standard_priest
                SPRINT variables "%variables%&IsDruid=True&priest_melee_choice=standard_priest"
         END
         avenger BEGIN
                SPRINT base dw#priest
                SPRINT priesttype standard_priest
                SPRINT variables "%variables%&IsDruid=True&IsAvenger=True&priest_melee_choice=avenger"
         END
     DEFAULT
                SET warning=1
                SPRINT base "dw#priest"
                SPRINT priesttype standard_priest
     END
     SPRINT variables "%variables%&ssl_priest_type=%priesttype%"
     PATCH_IF "%castertype%" STRING_EQUAL_CASE druid BEGIN
         SET spell_level = $caster_level_to_spell_level("druid" "%level%")
     END ELSE BEGIN
         SET spell_level = $caster_level_to_spell_level("cleric" "%level%")
     END
     FOR (i=1;i<=spell_level;i+=1) BEGIN
         SPRINT variables ~%variables%&HasL%i%=True~
     END
     PATCH_IF warning=1 BEGIN
         LPF warning STR_VAR warning=~Script for kit %kit%, race %race% was not correctly identified~ END
     END
END

DEFINE_ACTION_FUNCTION find_priest_script_base
      INT_VAR level=1
      STR_VAR kit=""
              race=""
              castertype=""
      RET base
          variables
BEGIN
   OUTER_PATCH "" BEGIN
      LPF find_priest_script_base INT_VAR level STR_VAR kit race castertype RET base variables END
   END
END


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


DEFINE_PATCH_FUNCTION allocate_priest_spells
      INT_VAR level=0
              spells_are_bg1="-1"
              refinements=0
              fighter=0
              wisdom=10
      STR_VAR class=""
              kit=""
              race=""
              filename=""
              spell_list=""
              spell_list_defensive=""
      RET     spells
              level_seven_max
              spell_turn_list
BEGIN
      //// initialise
      PATCH_IF ~spells_are_bg1~= ~-1~ BEGIN
         INNER_ACTION BEGIN
            ACTION_IF FILE_EXISTS ~override/dw#standardise_nobg2.mrk~ BEGIN
               OUTER_SET spells_are_bg1=1
            END ELSE BEGIN
               OUTER_SET spells_are_bg1=0
            END
         END
      END

      INNER_ACTION BEGIN
         OUTER_SPRINT spelltype priest
         LAUNCH_ACTION_MACRO read_in_spell_choices
      END
      TO_LOWER kit
      TO_LOWER race
      /// wipe existing spells

      LPF CRE_remove_spells STR_VAR arguments=priest END
      LPF CRE_remove_spells STR_VAR arguments="WIZARD_NPC_SYMBOL_STUN WIZARD_NPC_SYMBOL_FEAR WIZARD_NPC_SYMBOL_DEATH" END

      // assign HLAs
      // force_level is for the benefit of cleric/mages
      PATCH_IF !disable_hlas BEGIN
         LPF grant_hlas INT_VAR spellcaster=1 force_level=level STR_VAR class kit resref="%filename%" RET hla_list=hla END
      END// basic defensive choices

      PATCH_IF !VARIABLE_IS_SET "defensive_file_loaded_%spell_list_defensive%" BEGIN
          INNER_ACTION BEGIN
             ACTION_IF FILE_EXISTS "%scsroot%/priest/spellchoices_defensive/%base_folder_spells_priest%/%spell_list_defensive%.tph" BEGIN
                LAF include STR_VAR file="spellchoices_defensive/%base_folder_spells_priest%/%spell_list_defensive%.tph" END
             END ELSE BEGIN
                LAF include STR_VAR file="spellchoices_defensive/vanilla/%spell_list_defensive%.tph" END
             END
          END
      END
      LPF "defensive_spells_%spell_list_defensive%" INT_VAR level fighter RET spells END

      // fine-tune spells

      LPF individual_choices STR_VAR spells filename component=priest RET spells END
  /*  not using either atm
      LPF priest_spell_swap_race_preparatory STR_VAR spells race RET spells END
      LPF priest_spell_swap_specific_preparatory STR_VAR spells race RET spells END
  */
      PATCH_IF spells_are_bg1 BEGIN
         LPF priest_spell_swap_bg1_preparatory STR_VAR spells RET spells END
      END
      
      // work out remaining spell slots and allocate spells to them

      LPF determine_number_of_spells INT_VAR level wisdom STR_VAR class RET av_0 av_1 av_2 av_3 av_4 av_5 av_6 END

      FOR (i=6;i>=0;i -= 1) BEGIN
         PATCH_IF $av("%i%")>0 BEGIN
            SET lev_max=i
            SET i="-1"
         END
      END
      SET spell_turn_max = lev_max - 2

      SET level_seven_max="%av_6%"
      LPF count_spell_levels STR_VAR spells prefix=~CLERIC_~ RET ct_0 ct_1 ct_2 ct_3 ct_4 ct_5 ct_6 END
      FOR (i=0;i<7;i+=1) BEGIN
        SET $av(~%i%~)=$av(~%i%~) - $ct(~%i%~)
      END
      FOR(i=0;i<7;i+=1) BEGIN
         SET spell_level=i+1
         SET spell_num=$av(~%i%~)
         PATCH_IF debug_variable=2 BEGIN
           SPRINT ct_here $ct("%i%")
           PATCH_PRINT ~Spells at level %i%=%spell_num%; number already cast is %ct_here%~
         END
         PATCH_IF spell_num < 0 BEGIN
            LPF log_this STR_VAR file=illegal_priest_spells.txt input= ~%SOURCE_RES% at level %spell_level%~ END
         END
         SPRINT ~spells_here~ ~~
         PATCH_IF spell_num>0 BEGIN
            FOR (j=0;j<spell_num;j+=1) BEGIN
               PUSH spells_here PLACEHOLDER
            END
            SPRINT swap_in $spell_choices_priest(~%spell_list%~ ~%spell_level%~)
            LPF substitute_spells STR_VAR spells= ~%spells_here%~ swap_out=PLACEHOLDER swap_in RET spells_here=spells END
            PUSH spells ~%spells_here%~
         END
      END


      // fine-tune remaining spells

      LPF priest_spell_swap_misc STR_VAR spells filename RET spells END
      LPF priest_spell_swap_alignment STR_VAR spells filename RET spells END
      PATCH_IF spells_are_bg1=1 BEGIN
         LPF priest_spell_swap_bg1 STR_VAR spells RET spells END
      END


      // install the spells

            SPRINT spells_add ""
      SPRINT spells_list ""
      WHILE ~%spells%~ STRING_COMPARE_CASE ~~ BEGIN
         LPF return_first_entry STR_VAR list= ~%spells%~ RET spells=list entry END
         PATCH_MATCH "%entry%" WITH
            ".*_PRECAST" BEGIN
               SPRINT entry "CLERIC_%entry%"
               PUSH spells_list "%entry%"
            END
            "CLERIC_.*" "WIZARD_.*" BEGIN
                PUSH spells_add "%entry%"
                PUSH spells_list "%entry%"
            END
         DEFAULT
            SPRINT entry "CLERIC_%entry%"
            SET level=EVAL "%%entry%_LEVEL%"
            PATCH_IF level>spell_turn_max BEGIN
               PUSH spell_turn_list "%entry%"
            END
            PUSH spells_add "%entry%"
            PUSH spells_list "%entry%"
         END
      END
      LPF CRE_add_spells STR_VAR arguments=~%spells_add%~ END
      SPRINT spells "%spells_list% %hla_list%"
END

////////////////////////////////////////////////////////////////////////////////////////////////////
///   Swift shapeshifting
////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION swift_shapeshift_npc
     INT_VAR level=0
     STR_VAR kit="" class="" spells=""
BEGIN
   SET found_form=0
   PATCH_IF INDEX ("ELEMENTAL_TRANSFORMATION_EARTH" "%spells%")>=0 BEGIN
          LPF minimal_priest_weapon END
          LPF CRE_add_items STR_VAR arguments="dw#shnea(WEAPON2,NOTEQUIP)" END
          LPF CRE_remove_spells STR_VAR arguments="CLERIC_ELEMENTAL_TRANSFORMATION_EARTH" END
          SET found_form=1
   END
   PATCH_IF INDEX ("ELEMENTAL_TRANSFORMATION_FIRE" "%spells%")>=0 BEGIN
          LPF minimal_priest_weapon END
          LPF CRE_add_items STR_VAR arguments="dw#shnfi(WEAPON2,NOTEQUIP)" END
          LPF CRE_remove_spells STR_VAR arguments="CLERIC_ELEMENTAL_TRANSFORMATION_FIRE" END
          SET found_form=1
   END
   PATCH_IF (!found_form && "%class%" STRING_EQUAL_CASE druid) BEGIN
       PATCH_MATCH "%kit%" WITH
           shapeshifter BEGIN
               LPF minimal_priest_weapon END
               PATCH_IF level>=13 BEGIN
                     LPF CRE_add_items STR_VAR arguments="dw#shnw3(WEAPON2,NOTEQUIP)" END
                     LPF CRE_remove_spells STR_VAR arguments="SHAPESHIFTER_SHAPESHIFT_WEREWOLF SHAPESHIFTER_SHAPESHIFT_GREATERWEREWOLF" END
               END ELSE BEGIN
                  PATCH_IF level>=7 BEGIN
                       LPF CRE_add_items STR_VAR arguments="dw#shnw2(WEAPON2,NOTEQUIP)" END
                  END ELSE BEGIN
                       LPF CRE_add_items STR_VAR arguments="dw#shnw1(WEAPON2,NOTEQUIP)" END
                  END
                  LPF CRE_remove_spells STR_VAR arguments="SHAPESHIFTER_SHAPESHIFT_WEREWOLF" END
               END
           END
           avenger BEGIN
               PATCH_IF level>=7 BEGIN
                   LPF minimal_priest_weapon END
                   LPF CRE_add_items STR_VAR arguments="dw#shnsa(WEAPON2,NOTEQUIP) dw#shnsp(WEAPON3,NOTEQUIP)" END
                   LPF CRE_remove_spells STR_VAR arguments="DRUID_SHAPESHIFT_BROWNBEAR DRUID_SHAPESHIFT_BLACKBEAR DRUID_SHAPESHIFT_WOLF AVENGER_SHAPESHIFT_SWORDSPIDER AVENGER_SHAPESHIFT_BABYWYVERN AVENGER_SHAPESHIFT_FIRESALAMANDER" END
               END
           END
           DEFAULT
                PATCH_IF level>=7 BEGIN
                   LPF minimal_priest_weapon END
                   LPF CRE_add_items STR_VAR arguments="dw#shnbr(WEAPON2,NOTEQUIP)" END
                   LPF CRE_remove_spells STR_VAR arguments="DRUID_SHAPESHIFT_BROWNBEAR DRUID_SHAPESHIFT_BLACKBEAR DRUID_SHAPESHIFT_WOLF" END
                END
       END
   END
END


DEFINE_PATCH_FUNCTION minimal_priest_weapon BEGIN // anyone who has no weapon and gets a shapeshifting token will glitch and cast spells without shapeshifting back to human form

       LPF identify_weapon_preferences STR_VAR filename RET onhandprof has_ranged skip_me END
       PATCH_IF (!onhandprof && !skip_me) BEGIN
             LPF CRE_add_items STR_VAR arguments="%tutu_var%staf01(WEAPON1)" END
       END

END

DEFINE_PATCH_FUNCTION minimum_healing_level 
   INT_VAR level=0
   RET minimum_healing_level
BEGIN
   PATCH_MATCH level WITH
   1 2 3  BEGIN
       minimum_healing_level=1
   END
   4 5 BEGIN
       minimum_healing_level=2
   END
   6 7 BEGIN
     minimum_healing_level=3
   END
   8 BEGIN
     minimum_healing_level=4
   END
   9 10 11 12 13 14 BEGIN
      minimum_healing_level=level - 5
   END
   15 16 17  BEGIN
      minimum_healing_level=level - 6
   END
   18 19 20 BEGIN
      minimum_healing_level = level - 7
   END
   DEFAULT
      minimum_healing_level= level - 8
   END

END