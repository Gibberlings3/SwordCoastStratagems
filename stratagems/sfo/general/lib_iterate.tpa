///// this set of routines processes a list of resources to collect all resources
///// needed to enable them.
/////
/////
///// The string to_check contains all the resources left to check separated by spaces and the
///// routines should be called initially with the starting resources in this list.
/////
///// The variable $iter_has_checked("%resource%") is set if we've already checked it.
/////
///// For opcodes, we don't iterate through resources in 206 (etc) as they're not really required
///// by the spell and may not exist. But we do allow a function "immunity_func" to be called on
///// the resource name (e.g., to log it).

DEFINE_PATCH_FUNCTION check_adder
     STR_VAR to_check=""
             value=""
             suffix=""
     RET to_check
BEGIN
   PATCH_IF "%suffix%" STRING_EQUAL "" BEGIN PATCH_FAIL "No suffix in check_adder (argument is %value%)" END
   PATCH_IF ("%value%" STRING_COMPARE "" & "%value%" STRING_COMPARE_CASE "none") BEGIN
      SPRINT to_check "%to_check% %value%.%suffix%"
   END
END

DEFINE_PATCH_FUNCTION iter_opcode
    INT_VAR opcode=0
            param2=0
    STR_VAR to_check=""
            resref=""
            source=""
            source_ext=""
            immunity_func=""
    RET to_check
BEGIN
 PATCH_IF GAME_IS ~bg2 tob tutu tutu_totsc bgee bg2ee iwdee eet~ BEGIN
   PATCH_MATCH "%opcode%" WITH
       336 BEGIN
           INNER_ACTION BEGIN
              COPY_EXISTING_REGEXP "%resref%.*\.vvc" "%workspace%"
                    SPRINT to_check "%to_check% %SOURCE_RES%.vvc"
              BUT_ONLY
           END
       END
       15 44 BEGIN
          PATCH_IF param2=3 BEGIN
             SPRINT to_check "%to_check% clssplab.2da" // Cat's Grace/Strength externalisation
          END
       END
       335 BEGIN
          SPRINT to_check "%to_check% 7eyes.2da" // seven eyes INNER_ACTION BEGIN
          INNER_ACTION BEGIN
            ACTION_IF "%immunity_func%" STRING_COMPARE_CASE "" BEGIN
               LAF "%immunity_func%" STR_VAR resref resref_ext="SPL" source source_ext END
            END
          END
       END
       67 135 151 BEGIN SPRINT to_check "%to_check% %resref%.cre"
       END
       82 BEGIN SPRINT to_check "%to_check% %to_check% %resref%.bcs" END
       111 122 143 255 BEGIN SPRINT to_check "%to_check% %resref%.itm" END
       146 147 148 171 232 251 326 335 340 341 361 366 BEGIN SPRINT to_check "%to_check% %resref%.spl" END
       172 206 BEGIN

       END
       318 321 324 BEGIN
          INNER_ACTION BEGIN
            ACTION_IF "%immunity_func%" STRING_COMPARE_CASE "" BEGIN
             ACTION_IF FILE_EXISTS_IN_GAME "%resref%.itm" BEGIN
                LAF "%immunity_func%" STR_VAR resref resref_ext="ITM" source source_ext END
             END ELSE BEGIN
                LAF "%immunity_func%" STR_VAR resref resref_ext="SPL" source source_ext END
             END
            END
          END
       END
       177 272 248 249 283 BEGIN SPRINT to_check "%to_check% %resref%.eff" END
       174 BEGIN SPRINT to_check "%to_check% %resref%.wav" END
       215 BEGIN SPRINT to_check "%to_check% %resref%.vvc" END
       311 BEGIN LPF iter_wish STR_VAR to_check RET to_check=to_check END END
       331 BEGIN
            INNER_ACTION BEGIN
               COPY_EXISTING smtables.2da override
                    READ_2DA_ENTRY (param2 + 1) 1 2 monsum_table
               BUT_ONLY
            END
            SPRINT to_check "%to_check% %monsum_table%.2da"
            LPF log_this STR_VAR file=smtable_entries.2da input="%param2% %monsum_table%" repeat=no END
       END
       214 BEGIN // select spell
          SPRINT to_check "%to_check% %resref%.sda"
       END
       333 BEGIN
            PATCH_IF "%resref%" STRING_EQUAL "" BEGIN
               SPRINT to_check "%to_check% %source%b.spl"
            END ELSE BEGIN
               SPRINT to_check "%to_check% %resref%.spl"
            END
       END
       192 BEGIN LPF iter_fam STR_VAR to_check RET to_check=to_check END END
       127 BEGIN
          PATCH_IF "%resref%" STRING_COMPARE "" BEGIN
             SPRINT to_check "%to_check% %resref%.2da"
          END ELSE BEGIN
             LPF iter_opcode_monsum INT_VAR param2 STR_VAR to_check 2dalist="MONSUM01 MONSUM02 MONSUM03 ANISUM01 ANISUM02 MONSUM01 MONSUM02 MONSUM03 ANISUM01 ANISUM02" RET to_check=to_check END
          END
       END
   DEFAULT END
 END ELSE 
 PATCH_IF GAME_IS ~iwd how totlm~ BEGIN
     PATCH_MATCH "%opcode%" WITH

        67 135 151 259 410 411 BEGIN SPRINT to_check "%to_check% %resref%.cre" END
       82 BEGIN SPRINT to_check "%to_check% %to_check% %resref%.bcs" END
       111 122 143 BEGIN SPRINT to_check "%to_check% %resref%.itm" END
       146 147 148 171 BEGIN SPRINT to_check "%to_check% %resref%.spl" END
       174 BEGIN SPRINT to_check "%to_check% %resref%.wav" END
       127 BEGIN
          PATCH_IF "%resref%" STRING_COMPARE "" BEGIN
             SPRINT to_check "%to_check% %resref%.2da"
          END ELSE BEGIN
             LPF iter_opcode_monsum INT_VAR param2 STR_VAR to_check 2dalist="MONSUM01 MONSUM02 MONSUM03 ANISUM01 ANISUM02 MONSUM01 MONSUM02 MONSUM03 ANISUM01 ANISUM02" RET to_check=to_check END
          END
       END
       240 BEGIN
            LPF iter_opcode_monsum INT_VAR param2 STR_VAR to_check 2dalist="MSUMMO1 MSUMMO2 MSUMMO3 MSUMMO4 MSUMMO5 MSUMMO6 MSUMMO7 ASUMMO1 ASUMMO2 ASUMMO3 GINSECT CDOOM MSUMMOM" RET to_check=to_check END
       END
       243 BEGIN
            LPF iter_opcode_monsum INT_VAR param2 STR_VAR to_check 2dalist="ADEAD ADEADL" RET to_check=to_check END
       END
       246 BEGIN
            LPF iter_opcode_monsum INT_VAR param2 STR_VAR to_check 2dalist="SLIZARD STROLLS SSHADOW ISTALKE CFELEMW CEELEMW CWELEMW CFELEMP CEELEMP CWELEMP CEELEMM" RET to_check=to_check END
       END
       248 BEGIN
            LPF iter_opcode_monsum INT_VAR param2 STR_VAR to_check 2dalist="SMONSTE DSMONST SHADES" RET to_check=to_check END
       END
       262 BEGIN
          SPRINT to_check "%to_check% pomimg.cre"
       END
       293 BEGIN
          SPRINT to_check "%to_check% spin164.spl"
       END
       294 BEGIN
          SPRINT to_check "%to_check% spin166.spl"
       END
       295 BEGIN
          SPRINT to_check "%to_check% spin179.spl"
       END
       DEFAULT END
 END ELSE BEGIN
    PATCH_FAIL "Resource_iterate does not support your game"
 END
END

DEFINE_PATCH_FUNCTION iter_opcode_monsum
   INT_VAR param2=0
   STR_VAR to_check="" 2dalist=""
RET to_check
BEGIN
   SET count=0
   WHILE "%2dalist%" STRING_COMPARE "" BEGIN
      LPF return_first_entry STR_VAR list="%2dalist%" RET entry=entry 2dalist=list END
      SPRINT $mon_2da("%count%") "%entry%"
      SET count +=1
   END
   SPRINT this_2da $mon_2da("%param2%")
   SPRINT to_check "%to_check% %this_2da%.2da"
END


DEFINE_PATCH_FUNCTION iter_2da // checks 2da files used by monster summoning
    STR_VAR to_check=""
            entry=""
    RET to_check
BEGIN
  PATCH_MATCH "%entry%" WITH
  "clssplab.2da" "7eyes.2da" BEGIN END
  DEFAULT
    COUNT_2DA_COLS colcount
    PATCH_IF colcount=4 BEGIN
      COUNT_2DA_ROWS 4 rowcount
      FOR (i=0;i<rowcount;i+=1) BEGIN
         READ_2DA_ENTRY i 1 4 cre
         READ_2DA_ENTRY i 2 4 vvc1
         READ_2DA_ENTRY i 3 4 vvc2
         SPRINT to_check "%to_check% %cre%.cre %vvc1%.vvc %vvc2%.vvc"
      END
    END ELSE BEGIN
      COUNT_2DA_ROWS 2 rowcount
      FOR (i=1;i<rowcount;i+=1) BEGIN
       READ_2DA_ENTRY i 1 2 entry
       SPRINT to_check "%to_check% %entry%.cre"
      END
    END
  END
END

DEFINE_PATCH_FUNCTION iter_sda // checks 2da files used by spell-selection
    STR_VAR to_check=""
    RET to_check
BEGIN
      COUNT_2DA_ROWS 3 rowcount
      FOR (i=0;i<rowcount;i+=1) BEGIN
       READ_2DA_ENTRY i 1 3 entry
       SPRINT to_check "%to_check% %entry%.spl"
      END
END

DEFINE_PATCH_FUNCTION iter_are //
   STR_VAR to_check=""
   RET to_check
BEGIN
   PATCH_IF GAME_IS ~iwd how totlm~ BEGIN
       SPRINT to_check "%to_check% %SOURCE_RES%.ini"
   END
   LPF ARE_read_area_script RET value=value END
   LPF check_adder STR_VAR to_check value suffix=bcs RET to_check=to_check END
   SPRINT file_ext ARE
   SPRINT entry_type actor
   LPM get_offset_array
   PHP_EACH offset_array AS int=>offset_base BEGIN
      LPF ARE_read_crefile STR_VAR offset_base RET value=value END
      LPF check_adder STR_VAR to_check value suffix=cre RET to_check=to_check END
      LPF ARE_read_dialog STR_VAR offset_base RET value=value END
      LPF check_adder STR_VAR to_check value suffix=dlg RET to_check=to_check END
      PATCH_FOR_EACH script IN override default race class general specifics BEGIN
         LPF "ARE_read_script_%script%" STR_VAR offset_base RET value=value END
         LPF check_adder STR_VAR to_check value suffix=bcs RET to_check=to_check END
      END
   END
   SPRINT entry_type trigger
   LPM get_offset_array
   PHP_EACH offset_array AS int=>offset_base BEGIN
      LPF ARE_read_trigger_script STR_VAR offset_base RET value=value END
      LPF check_adder STR_VAR to_check value suffix=bcs RET to_check=to_check END
      LPF ARE_read_destination STR_VAR offset_base RET value=value END
      LPF check_adder STR_VAR to_check value suffix=are RET to_check=to_check END
   END
   SPRINT entry_type spawn
   LPM get_offset_array
     PHP_EACH offset_array AS int=>offset_base BEGIN
      FOR (i=1;i<=10;i+=1) BEGIN
         LPF "ARE_read_spawn_creature%i%" STR_VAR offset_base RET value=value END
         LPF check_adder STR_VAR to_check value suffix=cre RET to_check=to_check END
      END
     END
   READ_LONG AREoffset_loc_restspawn offset_base
     PATCH_IF offset_base>0 BEGIN
      FOR (i=1;i<=10;i+=1) BEGIN
         LPF "ARE_read_restspawn_creature%i%" STR_VAR offset_base RET value=value END
         LPF check_adder STR_VAR to_check value suffix=cre RET to_check=to_check END
      END
     END
   SPRINT entry_type container
   LPM get_offset_array
   PHP_EACH offset_array AS int=>offset_base BEGIN
      LPF ARE_read_container_script STR_VAR offset_base RET value=value END
      LPF check_adder STR_VAR to_check value suffix=bcs RET to_check=to_check END
   END
   SPRINT entry_type door
   LPM get_offset_array
   PHP_EACH offset_array AS int=>offset_base BEGIN
      LPF ARE_read_door_script STR_VAR offset_base RET value=value END
      LPF check_adder STR_VAR to_check value suffix=bcs RET to_check=to_check END
      LPF ARE_read_door_dialog STR_VAR offset_base RET value=value END
      LPF check_adder STR_VAR to_check value suffix=dlg RET to_check=to_check END
   END
   SPRINT entry_type item
   LPM get_offset_array
   PHP_EACH offset_array AS int=>offset_secondary BEGIN
      LPF ARE_read_item_resource STR_VAR offset_secondary RET value=value END
      LPF check_adder STR_VAR to_check value suffix=itm RET to_check=to_check END
   END
   SPRINT entry_type animation
   LPM get_offset_array
   PHP_EACH offset_array AS int=>offset_base BEGIN
      LPF ARE_read_animation_resource STR_VAR offset_base RET value=value END
      LPF check_adder STR_VAR to_check value suffix=bam RET to_check=to_check END
   END
   SPRINT entry_type ambient
   LPM get_offset_array
   PHP_EACH offset_array AS int=>offset_base BEGIN
      FOR (i=1;i<=10;i+=1) BEGIN
        LPF "ARE_read_ambient_sound%i%" STR_VAR offset_base RET value=value END
        LPF check_adder STR_VAR to_check value suffix=wav RET to_check=to_check END
      END
   END
END


DEFINE_PATCH_FUNCTION iter_spl  // just check all the opcodes and the BAMs, and the projectile
    STR_VAR to_check=""
            immunity_func=""
    RET to_check
BEGIN
       SPRINT source "%SOURCE_RES%"
       READ_ASCII 0x3a value
       LPF check_adder STR_VAR to_check value suffix=bam RET to_check END
       GET_OFFSET_ARRAY ab_array 0x64 4 0x68 2 0 0 0x28
       PHP_EACH ab_array AS int=>ab_off BEGIN
          READ_ASCII (ab_off+0x4) value
          LPF check_adder STR_VAR to_check value suffix=bam RET to_check END
          READ_SHORT (ab_off + 0x26) proj
          PATCH_IF proj>1 BEGIN
            SET proj -=1
            LOOKUP_IDS_SYMBOL_OF_INT value projectl proj
            PATCH_IF !IS_AN_INT value BEGIN
               LPF check_adder STR_VAR to_check value suffix=pro RET to_check END
            END
          END
          GET_OFFSET_ARRAY2 eff_array ab_off ITM_V10_HEAD_EFFECTS
          PHP_EACH eff_array AS int2=>offset BEGIN
              READ_SHORT offset opcode
              READ_ASCII (offset+0x14) resref
              READ_LONG (offset+0x8) param2
              LPF iter_opcode INT_VAR opcode param2 STR_VAR immunity_func source source_ext=SPL resref to_check RET to_check=to_check END
          END
       END
       GET_OFFSET_ARRAY gen_eff_array SPL_V10_GEN_EFFECTS 
       PHP_EACH gen_eff_array AS int=>offset BEGIN
              READ_SHORT offset opcode
              READ_ASCII (offset+0x14) resref
              READ_LONG (offset+0x8) param2
              LPF iter_opcode INT_VAR opcode param2 STR_VAR immunity_func source source_ext=SPL resref to_check RET to_check=to_check END
       END
END

DEFINE_PATCH_FUNCTION iter_pro //  check the BAM, WAV and VVC files, and any secondary projectile
    STR_VAR to_check=""
    RET to_check
BEGIN
    PATCH_FOR_EACH wav_off IN 0x10 0x18 BEGIN
       READ_ASCII wav_off value
       LPF check_adder STR_VAR to_check value suffix=wav RET to_check END
    END
    PATCH_IF BUFFER_LENGTH >0x100 BEGIN // projectile data
       PATCH_FOR_EACH bam_off IN 0x104 0x10c 0x136 0x13e 0x146 BEGIN
          READ_ASCII bam_off value
          LPF check_adder STR_VAR to_check value suffix=bam RET to_check END
       END
    END
    PATCH_IF BUFFER_LENGTH >0x200 BEGIN // area effect data
        PATCH_FOR_EACH wav_off IN 0x208 0x238 BEGIN
           READ_ASCII wav_off value
           LPF check_adder STR_VAR to_check value suffix=wav RET to_check END
        END
        PATCH_FOR_EACH anim_off IN 0x21c 0x228 0x230 0x238 BEGIN
           READ_ASCII anim_off value
           INNER_ACTION BEGIN
              ACTION_IF FILE_EXISTS_IN_GAME "%value%.vvc" BEGIN
                 OUTER_SPRINT suffix vvc
              END ELSE BEGIN
                 OUTER_SPRINT suffix bam
              END
           END
           LPF check_adder STR_VAR to_check value suffix RET to_check END
        END
        PATCH_FOR_EACH proj_off IN 0x214 0x21a BEGIN
         READ_SHORT proj_off proj
         SET proj -=1
         PATCH_MATCH "%proj%" WITH
         0 1 79 BEGIN END
         DEFAULT
          LOOKUP_IDS_SYMBOL_OF_INT value projectl proj
          PATCH_IF !IS_AN_INT value BEGIN
            LPF check_adder STR_VAR to_check value suffix=pro RET to_check END
          END
         END
        END
    END



END

DEFINE_PATCH_FUNCTION iter_itm  // just check all the opcodes, the BAMs, and whether it's a bag
    STR_VAR to_check=""
            immunity_func=""
    RET to_check
BEGIN
       SPRINT source "%SOURCE_RES%"
       PATCH_FOR_EACH bam_off IN 0x3a 0x44 0x58 BEGIN
          READ_ASCII bam_off value
          LPF check_adder STR_VAR to_check value suffix=bam RET to_check END
       END

       READ_SHORT 0x1c cat
       PATCH_IF (cat=36 || cat=58) BEGIN  // risk the odd false positive
           SPRINT to_check "%to_check% %SOURCE_RES%.sto"
       END
       GET_OFFSET_ARRAY geneff_array ITM_V10_GEN_EFFECTS
       PHP_EACH geneff_array AS int=>offset BEGIN
              READ_SHORT offset opcode
              READ_ASCII (offset+0x14) resref
              LPF iter_opcode INT_VAR opcode STR_VAR immunity_func source source_ext=ITM resref to_check RET to_check=to_check END
       END
       GET_OFFSET_ARRAY ab_array 0x64 4 0x68 2 0 0 0x38
       PHP_EACH ab_array AS int=>ab_off BEGIN
          READ_ASCII (ab_off+0x4) value
          READ_SHORT (ab_off + 0x36) proj
          PATCH_IF proj>1 BEGIN
            SET proj -=1
            LOOKUP_IDS_SYMBOL_OF_INT value projectl proj
            PATCH_IF !IS_AN_INT value BEGIN
               LPF check_adder STR_VAR to_check value suffix=pro RET to_check END
            END
          END
          LPF check_adder STR_VAR to_check value suffix=bam RET to_check END
          GET_OFFSET_ARRAY2 eff_array ab_off ITM_V10_HEAD_EFFECTS
          PHP_EACH eff_array AS int2=>offset BEGIN
              READ_SHORT offset opcode
              READ_LONG (offset+0x8) param2
              READ_ASCII (offset+0x14) resref
              LPF iter_opcode INT_VAR opcode param2 STR_VAR immunity_func source source_ext=ITM resref to_check RET to_check=to_check END
          END
       END
END

DEFINE_PATCH_FUNCTION iter_item_random
    STR_VAR item=""
            to_check=""
    RET to_check
BEGIN
   SET random=0
   TO_LOWER item
   PATCH_IF GAME_IS "iwd totlm how" BEGIN
      PATCH_IF VARIABLE_IS_SET $random_item( "%item%") BEGIN
         SPRINT list $random_item("%item%")
         SET random=1
      END
   END ELSE BEGIN
      PATCH_IF !"%item%" STRING_CONTAINS_REGEXP "rnd\(tre\|scr\|mag\)" BEGIN
         INNER_PATCH "%item%" BEGIN
            READ_ASCII 0x0 filestart (6)
            READ_ASCII 0x6 code (2)
         END
         PATCH_MATCH "%filestart%" WITH
         rndmag BEGIN
            SPRINT 2da rndmagic
         END
         rndscr BEGIN
            SPRINT 2da rndscrol
         END
         rndtre BEGIN
            SPRINT 2da rndtreas
         END
         DEFAULT END
         INNER_ACTION BEGIN
             COPY_EXISTING "%2da%.2da" "%workspace%"
                LPF read_rest_of_line INT_VAR row=code - 1 col=2 colmin=3 RET list=list END
             BUT_ONLY
         END
      SET random=1
      END
   END
   PATCH_IF random BEGIN
      WHILE "%list%" STRING_COMPARE "" BEGIN
             LPF return_first_entry STR_VAR list RET entry=entry list=list END
             INNER_PATCH_SAVE entry "%entry%" BEGIN
                REPLACE_TEXTUALLY "\*[0-9]+" ""
             END
             SPRINT to_check "%to_check% %entry%.itm"
      END
   END
END

DEFINE_PATCH_FUNCTION iter_eff
    STR_VAR to_check=""
            immunity_func=""
    RET to_check
BEGIN
    READ_LONG 0x10 opcode
    READ_LONG 0x20 param2
    READ_ASCII 0x30 resref
    LPF iter_opcode INT_VAR opcode param2 STR_VAR immunity_func resref to_check RET to_check=to_check END
END

DEFINE_PATCH_FUNCTION iter_cre
    STR_VAR to_check=""
    RET to_check
BEGIN
    // scripts
    FOR (i=0;i<5;i+=1) BEGIN
      READ_ASCII (0x248 + 0x8 * i) script
      PATCH_IF ("%script%" STRING_COMPARE "" && "%script%" STRING_COMPARE_CASE "none") BEGIN
       SPRINT to_check "%to_check% %script%.bcs"
      END
    END
    // dialog
    PATCH_IF GAME_IS "iwd how totlm" BEGIN
        READ_ASCII 0x334 dialog
    END ELSE BEGIN
        READ_ASCII 0x2cc dialog
    END
    PATCH_IF ("%dialog%" STRING_COMPARE "" && "%dialog%" STRING_COMPARE_CASE "none") BEGIN
       SPRINT to_check "%to_check% %dialog%.dlg"
    END
    // spells known
    PATCH_IF GAME_IS "iwd how totlm" BEGIN
       GET_OFFSET_ARRAY splk_arr 0x308 4 0x30c 4 0 0 0xc
    END ELSE BEGIN
       GET_OFFSET_ARRAY splk_arr 0x2a0 4 0x2a4 4 0 0 0xc
    END
    PHP_EACH splk_arr AS int=>off BEGIN
       READ_ASCII off spell
       SPRINT to_check "%to_check% %spell%.spl"
    END
    // spells memorized
    PATCH_IF GAME_IS "iwd how totlm" BEGIN
       GET_OFFSET_ARRAY splm_arr 0x318 4 0x31c 4 0 0 0xc
    END ELSE BEGIN
       GET_OFFSET_ARRAY splm_arr 0x2b0 4 0x2b4 4 0 0 0xc
    END
    PHP_EACH splm_arr AS int=>off BEGIN
       READ_ASCII off spell
       SPRINT to_check "%to_check% %spell%.spl"
    END
    // items
    PATCH_IF GAME_IS "iwd how totlm" BEGIN
       GET_OFFSET_ARRAY itm_arr 0x324 4 0x328 4 0 0 0x14
    END ELSE BEGIN
       GET_OFFSET_ARRAY itm_arr 0x2bc 4 0x2c0 4 0 0 0x14
    END
    PHP_EACH itm_arr AS int=>off BEGIN
       READ_ASCII off item
       SPRINT to_check "%to_check% %item%.itm"
    END
END

DEFINE_PATCH_FUNCTION iter_script
    STR_VAR to_check=""
    RET to_check
BEGIN
    REPLACE_EVALUATE CASE_INSENSITIVE ~\(CreateItem\|GiveItemCreate\)("\([^"]+\)"~ BEGIN
       SPRINT to_check "%to_check% %MATCH2%.itm"
    END
    ~%MATCH1%("%MATCH2%"~
    REPLACE_EVALUATE CASE_INSENSITIVE  ~\(CreateCreature\|CreateCreatureObject\|CreateCreatureObjectDoor\|CreateCreatureObjectOffScreen\|CreateCreatureObjectCopy\|CreateCreatureObjectOffset\|CreateCreatureCopyPoint\|CreateCreatureObjectEffect\|CreateCreatureObjectCopyEffect\)("\([^"]+\)"~ BEGIN
       SPRINT to_check "%to_check% %MATCH2%.cre"
    END
    ~%MATCH1%("%MATCH2%"~
    REPLACE_EVALUATE CASE_INSENSITIVE  ~CreateCreatureAtLocation(\([^,]+\),\([^,]+\),"\([^"]+\)")~ BEGIN
       SPRINT to_check "%to_check% %MATCH3%.cre"
    END
    ~CreateCreatureAtLocation(%MATCH1%,%MATCH2%,"%MATCH3%")~
    REPLACE_EVALUATE CASE_INSENSITIVE  ~AddSpecialAbility("\([^"]+\)")~ BEGIN
       SPRINT to_check "%to_check% %MATCH1%.spl"
    END
    ~AddSpecialAbility("%MATCH1%")~
    REPLACE_EVALUATE CASE_INSENSITIVE  ~\([a-z0-9]+RES\)("\([^"]+\)"~ BEGIN
      SPRINT to_check "%to_check% %MATCH2%.spl"
    END
    ~%MATCH1%("%MATCH2%"~
    REPLACE_EVALUATE CASE_INSENSITIVE  ~\(ChangeCurrentScript\|SetAIScript\|StartCutScene\)("\([^"]+\)"~ BEGIN
      LPF check_adder STR_VAR to_check value="%MATCH2%" suffix=bcs RET to_check=to_check END
    END
    ~%MATCH1%("%MATCH2%"~
    REPLACE_EVALUATE CASE_INSENSITIVE  ~\(StartDialog\|SetDialog\)("\([^"]+\)"~ BEGIN
      LPF check_adder STR_VAR to_check value="%MATCH2%" suffix=dlg RET to_check=to_check END
    END
    ~%MATCH1%("%MATCH2%"~
    REPLACE_EVALUATE CASE_INSENSITIVE  ~StartStore("\([^"]+\)"~ BEGIN
       SPRINT to_check "%to_check% %MATCH1%.sto"
    END
    ~StartStore("%MATCH1%"~
    REPLACE_EVALUATE CASE_INSENSITIVE  ~\(LeaveAreaLUA\|LeaveAreaLUAPanic\|MoveBetweenAreas\|RevealAreaOnMap\|MoveBetweenAreasEffect\|EscapeAreaObjectMove\|LeaveAreaLUAEntry\|LeaveAreaLUAPanicEntry\)("\([^"]+\)"~ BEGIN
      SPRINT to_check "%to_check% %MATCH2%.are"
    END
    ~%MATCH1%("%MATCH2%"~
END

DEFINE_PATCH_FUNCTION iter_bcs
    STR_VAR to_check=""
    RET to_check
BEGIN
  PATCH_IF "%SOURCE_RES%" STRING_COMPARE_CASE sarvie01 BEGIN // I OFFICIALLY DON'T CARE why this doesn't compile
   DECOMPILE_AND_PATCH BEGIN
      LPF iter_script STR_VAR to_check RET to_check=to_check END
   END
  END
END


DEFINE_PATCH_FUNCTION iter_dlg
    STR_VAR to_check=""
    RET to_check
BEGIN 
//   DECOMPILE_AND_PATCH BEGIN      // don't bother - dialog scripts aren't compiled
      LPF iter_script STR_VAR to_check RET to_check=to_check END
 //  END
END

DEFINE_PATCH_FUNCTION iter_ini
   STR_VAR to_check=""
   RET to_check
BEGIN
   COUNT_2DA_ROWS 3 rowcount
   FOR (i=0;i<rowcount;i+=1) BEGIN
      READ_2DA_ENTRY i 0 3 type
      PATCH_IF "%type%" STRING_EQUAL_CASE cre_file BEGIN
         READ_2DA_ENTRY i 2 3 creature
         SPRINT to_check "%to_check% %creature%.cre"
      END
      PATCH_IF !"%type%" STRING_CONTAINS_REGEXP script BEGIN
         READ_2DA_ENTRY i 2 3 script
         SPRINT to_check "%to_check% %script%.bcs"
      END
   END
END

DEFINE_PATCH_FUNCTION iter_sto
   STR_VAR to_check=""
   RET to_check
BEGIN
   SPRINT file_ext STO
   SPRINT entry_type item
   LPF STO_read_rumors RET value=value END
   LPF check_adder STR_VAR to_check value suffix=dlg RET to_check END
   SPRINT to_check "%to_check% %value%.dlg"
   LPM get_offset_array
   PHP_EACH offset_array AS int=>offset_base BEGIN
      LPF STO_read_item_resource STR_VAR offset_base RET value=value END
      SPRINT to_check "%to_check% %value%.itm"
   END
   SPRINT entry_type cure
   LPM get_offset_array
   PHP_EACH offset_array AS int=>offset_base BEGIN
      LPF STO_read_cure_resource STR_VAR offset_base RET value=value END
      SPRINT to_check "%to_check% %value%.spl"
   END
END

DEFINE_PATCH_FUNCTION iter_wmp
   STR_VAR to_check=""
   RET to_check
BEGIN
   SPRINT file_ext WMP
   SPRINT entry_type area
   LPM get_offset_array
   PHP_EACH offset_array AS int=>offset_base BEGIN
      LPF WMP_read_resource STR_VAR offset_base RET value=value END
      SPRINT to_check "%to_check% %value%.are"
   END
   SPRINT entry_type link
   LPM get_offset_array
   PHP_EACH offset_array AS int=>offset_base BEGIN
     FOR (i=1;i<=5;i+=1) BEGIN
      LPF "WMP_read_random_area_%i%" STR_VAR offset_base RET value=value END
      LPF check_adder STR_VAR to_check value suffix=are RET to_check=to_check END
     END
   END
END

DEFINE_PATCH_FUNCTION iter_wish
    STR_VAR to_check=""
    RET to_check
BEGIN
    FOR (i=1;i<=9;i+=1) BEGIN
       SPRINT to_check "%to_check% spwish0%i%"
    END
    FOR (i=10;i<=25;i+=1) BEGIN
       SPRINT to_check "%to_check% spwish%i%"
    END
END

DEFINE_PATCH_FUNCTION iter_vvc
   STR_VAR to_check=""
   RET to_check
BEGIN
   PATCH_FOR_EACH snd_off IN 0x78 0x80 0x94 BEGIN
      READ_ASCII snd_off value
      LPF check_adder STR_VAR to_check value suffix=wav RET to_check END
   END
   PATCH_FOR_EACH bam_off IN 0x8 BEGIN
      READ_ASCII bam_off value
      LPF check_adder STR_VAR to_check value suffix=bam RET to_check END
   END
END

DEFINE_PATCH_FUNCTION iter_fam
    STR_VAR to_check=""
    RET to_check
BEGIN
   SPRINT to_check "%to_check% fampsd.cre famfer.cre famimp.cre famrab.cre famdust.cre famfair.cre famcat.cre famquas.cre"
END



DEFINE_ACTION_FUNCTION iter_resource
    INT_VAR include_spells=0
            skip_payload_on_ignore=0
    STR_VAR to_check=""
            func=""
            ignore_func=""
            immunity_func=""
    RET output
BEGIN
    ACTION_IF include_spells BEGIN
       LAF return_spell_baseline RET list END
       OUTER_SPRINT to_check "%to_check% %list%"
    END
    OUTER_SET counter=0
    OUTER_SET hundreds=0
    OUTER_SPRINT output ""

    // read in a list of random item resources
    ACTION_IF GAME_IS "iwd totlm how" BEGIN
        COPY_EXISTING rndtres.2da "%workspace%"
                COUNT_2DA_ROWS 3 rowcount
                FOR (i=0;i<rowcount;i+=1) BEGIN
                   READ_2DA_ENTRY i 0 3 entry
                   TO_LOWER entry
                   LPF read_rest_of_line INT_VAR row=i col=1 colmin=3 RET items=list END
                   SPRINT $random_item("%entry%") "%items%"
                END
        BUT_ONLY
    END
    OUTER_WHILE "%to_check%" STRING_COMPARE "" BEGIN
        LAF return_first_entry STR_VAR list="%to_check%" RET entry=entry to_check=list END
        ACTION_TO_LOWER entry
        ACTION_IF VARIABLE_IS_SET $already_checked( "%entry%") BEGIN
                ACTION_IF debug_variable=2 BEGIN
                         PRINT "Not checking %entry% as it's already been done"
                END
        END ELSE BEGIN
            // analyse
            OUTER_SPRINT $already_checked("%entry%") ""
            OUTER_INNER_PATCH_SAVE entry "%entry%" BEGIN
                    READ_ASCII (BUFFER_LENGTH - 3) ext (3)
                    PATCH_IF "%ext%" STRING_EQUAL_CASE "sda" BEGIN
                       WRITE_ASCII (BUFFER_LENGTH - 3) "2da"
                    END
            END
            // iterative part
            OUTER_SPRINT to_check_here ""
            // first check if it's a hook into the random-item list
            ACTION_IF "%ext%" STRING_EQUAL itm BEGIN
                   OUTER_PATCH "" BEGIN
                      LPF iter_item_random STR_VAR to_check="%to_check_here%" item RET to_check_here=to_check END
                   END
            END
            ACTION_IF !FILE_EXISTS_IN_GAME "%entry%" BEGIN
                      ACTION_IF debug_variable=2 BEGIN
                         PRINT "Not checking %entry% as it doesn't actually exist"
                      END
            END ELSE BEGIN
                      ACTION_IF debug_variable=2 BEGIN
                         PRINT "Checking %entry%"
                      END
                      LAF count_hundreds INT_VAR counter hundreds RET counter=counter hundreds=hundreds END
                      ACTION_MATCH "%ext%" WITH
                      bam wav BEGIN END
                      DEFAULT
                         COPY_EXISTING "%entry%" "%workspace%"
                           LPF "iter_%ext%" STR_VAR entry immunity_func to_check="%to_check_here%" RET to_check_here=to_check END
                         BUT_ONLY
                      END
            END
            // go through to_check_here; add all the ones we're not ignoring; execute the payload
            OUTER_WHILE "%to_check_here%" STRING_COMPARE "" BEGIN
               LAF return_first_entry STR_VAR list="%to_check_here%" RET entry_here=entry to_check_here=list END
               OUTER_INNER_PATCH_SAVE resref "%entry_here%" BEGIN
                    READ_ASCII (BUFFER_LENGTH - 3) ext (3)
                    DELETE_BYTES (BUFFER_LENGTH - 4) 4
               END
               ACTION_IF "%ignore_func%" STRING_COMPARE_CASE "" BEGIN
                      LAF "%ignore_func%" STR_VAR resref ext parent="%entry%" RET ignore_entry=value END
               END ELSE BEGIN
                      OUTER_SET ignore_entry=0
               END
               ACTION_IF !ignore_entry BEGIN
                     OUTER_SPRINT "to_check" "%to_check% %entry_here%"
               END
               ACTION_IF !VARIABLE_IS_SET "parent_child_%entry%_%entry_here%" BEGIN
                  ACTION_IF (!skip_payload_on_ignore || !ignore_entry) BEGIN
                     LAF "%func%" STR_VAR output resref ext parent="%entry%" RET output END
                     OUTER_SPRINT "parent_child_%entry%_%entry_here%" ""
                  END
               END
            END
        END
    END // end of handling of to_check element
END

/////////////////////////////////////////////////////////////////////////////////////
///   Return every spell in spell.ids and every spell used in any CLAB file
//////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION return_spell_baseline
   RET list
BEGIN
   OUTER_SPRINT list ""
   COPY_EXISTING "spell.ids" override
      COUNT_2DA_ROWS 2 rowcount
      FOR (i=0;i<rowcount;i+=1) BEGIN
          READ_2DA_ENTRY i 0 2 idscode
          PATCH_IF !~%idscode%~ STRING_EQUAL_CASE IDS BEGIN
             LPF idscode_to_spell INT_VAR idscode RET resref END
             SPRINT list "%list% %resref%.spl"
          END
      END
   BUT_ONLY
   COPY_EXISTING_REGEXP "\(clab\|lu\).*\.2da" "%workspace%"
       COUNT_2DA_COLS colcount
       COUNT_2DA_ROWS colcount rowcount
       FOR (i=0;i<rowcount;i+=1) BEGIN
          FOR (j=i;j<colcount;j+=1) BEGIN
             READ_2DA_ENTRY i j colcount spell
             PATCH_MATCH "%spell%" WITH
                "GA_.*" "AP_.*" BEGIN
                   INNER_PATCH_SAVE spell "%spell%" BEGIN
                      DELETE_BYTES 0x0 3
                   END
                   SPRINT list "%list% %spell%.spl"
                END
                DEFAULT
                END
          END
       END
   BUT_ONLY





END


DEFINE_ACTION_FUNCTION iterfunc_missing_file
   STR_VAR resref=""
           ext=""
           parent=""
           output=""
   RET     output
BEGIN
   ACTION_IF "%ext%" STRING_EQUAL_CASE sda BEGIN
         OUTER_SPRINT ext 2da
   END
   ACTION_IF !FILE_EXISTS_IN_GAME "%resref%.%ext%" BEGIN
      OUTER_SET report=1

      ACTION_MATCH "%resref%" WITH
      "rndtre.*" "rndmag.*"
      BEGIN 
        OUTER_SET report=0
      END
      DEFAULT
      END
      ACTION_IF "%ext%" STRING_EQUAL bcs BEGIN
         ACTION_MATCH "%resref%.are" WITH
         "%parent%" BEGIN
                 OUTER_SET report=0
         END
         DEFAULT
         END
      END
      ACTION_IF "%ext%" STRING_EQUAL vvc BEGIN
         ACTION_IF FILE_EXISTS_IN_GAME "%resref%.bam" BEGIN
            OUTER_SET report=0
         END
      END
      ACTION_IF report BEGIN
         LAF push STR_VAR tail="%output%" head="%resref%.%ext% (used by %parent%)" RET output=list END
      END
   END
END
