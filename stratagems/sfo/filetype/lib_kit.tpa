//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////    General kit editor
/////    "kit" refers to the table entry in kitlist.2da
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION edit_kit
      INT_VAR skip_lua=0
              skip_clab=0
              at_top_hla=0
      STR_VAR editstring=""
              edits=""
              kit=""
BEGIN    
          // synonyms
          LAF standardize_kit STR_VAR arguments="%kit%" RET kit=value END
          // get parent class
          LAF resolve_parent_class STR_VAR kit RET parent_class true_class multiclassed END
          OUTER_SET class_id=IDS_OF_SYMBOL (class "%parent_class%")
          // get kit code
          ACTION_IF true_class=0 BEGIN
             COPY_EXISTING kitlist.2da "%workspace%" 
                 LPF get_table_row_coordinate INT_VAR lookup_column=1 STR_VAR row="%kit%" RET kit_id=rownum END
             BUT_ONLY
          END
          // process edits
          OUTER_SPRINT clab_edits ""
          OUTER_SPRINT lua_edits ""
          OUTER_WHILE "%editstring%" STRING_COMPARE "" BEGIN
             LAF return_first_pair STR_VAR list="%editstring%" RET command=key arguments=value editstring=list END
             OUTER_PATCH_SAVE command "%command%" BEGIN
                REPLACE_TEXTUALLY "'[0-9]*" ""
                REPLACE_TEXTUALLY "'" ""
             END
             ACTION_MATCH "%command%" WITH
             grant_power apply_power remove_power BEGIN
                  OUTER_SPRINT clab_edits "%clab_edits% %command%=>~%arguments%~"
             END
             remove_hla grant_hla apply_hla restrict_hla BEGIN
                  OUTER_SPRINT lua_edits "%lua_edits% %command%=>~%arguments%~"
             END
             DEFAULT
                LAF edit_kit_parser STR_VAR command arguments END
             END
          END
          ACTION_PHP_EACH "%edits%" AS command=>arguments BEGIN
             OUTER_PATCH_SAVE command "%command%" BEGIN
                REPLACE_TEXTUALLY "'[0-9]*" ""
                REPLACE_TEXTUALLY "'" ""
             END

             ACTION_MATCH "%command%" WITH
             grant_power apply_power remove_power BEGIN
                  OUTER_SPRINT clab_edits "%clab_edits% %command%=>~%arguments%~"
             END
             remove_hla grant_hla apply_hla restrict_hla BEGIN
                  OUTER_SPRINT lua_edits "%lua_edits% %command%=>~%arguments%~"
             END
             DEFAULT
                LAF edit_kit_parser STR_VAR command arguments END
             END
          END
          // process CLAB editing
          ACTION_IF ("%clab_edits%" STRING_COMPARE "" && !skip_clab) BEGIN
             LAF edit_clab STR_VAR editstring="%clab_edits%" kit END
          END
          // process LUA editing
          ACTION_IF ("%lua_edits%" STRING_COMPARE "" && !skip_lua) BEGIN
             LAF edit_lua INT_VAR at_top="%at_top_hla%" STR_VAR editstring="%lua_edits%" kit END
          END
END


DEFINE_ACTION_FUNCTION edit_kit_parser
   STR_VAR command=""
           arguments=""
BEGIN
             OUTER_SET found=1
             ACTION_TO_UPPER command
             ACTION_TO_UPPER kit
             ACTION_MATCH "%command%" WITH
                  "min_\(str\|dex\|con\|int\|wis\|chr\)" BEGIN
                     LAF write_table_entry STR_VAR row="%kit%" column="%command%" arguments file=ABCLASRQ END
                  END
                  "mod_\(str\|dex\|con\|int\|wis\|chr\)" BEGIN
                     LAF write_table_entry STR_VAR row="%kit%" column="%command%" arguments file=ABCLSMOD END
                  END
                  "dc_from_min_\(str\|dex\|con\|int\|wis\|chr\)" BEGIN
                  ACTION_IF multiclassed BEGIN
                        FAIL "%command% is not valid for multi-classed characters"
                  END
                     OUTER_PATCH_SAVE command "%command%" BEGIN
                        DELETE_BYTES 0x0 3
                     END
                     LAF write_table_entry STR_VAR row="%kit%" column="%command%" arguments file=ABDCSCRQ END
                  END
                  "dc_to_min_\(str\|dex\|con\|int\|wis\|chr\)" BEGIN
                  ACTION_IF !true_class BEGIN
                        FAIL "%command% is not valid for kitted characters"
                  END
                  ACTION_IF multiclassed BEGIN
                        FAIL "%command% is not valid for multi-classed characters"
                  END
                     OUTER_PATCH_SAVE command "%command%" BEGIN
                        DELETE_BYTES 0x0 3
                     END
                     LAF write_table_entry STR_VAR row="%kit%" column="%command%" arguments file=ABDCDSRQ END
                  END
                  "\(lawful\|chaotic\|neutral\)_\(good\|neutral\|evil\)" "neutral" "[lcn]_[gne]" BEGIN
                     OUTER_PATCH_SAVE command "%command%" BEGIN
                         REPLACE_TEXTUALLY lawful l
                         REPLACE_TEXTUALLY chaotic c
                         REPLACE_TEXTUALLY good g
                         REPLACE_TEXTUALLY evil e
                         REPLACE_TEXTUALLY neutral n
                         REPLACE_TEXTUALLY "^n$" "n_n"
                     END
                     LAF write_table_entry STR_VAR row="%kit%" column="%command%" arguments file=ALIGNMNT END
                  END
                  small_sword large_sword blunt missile bow spiked axe spear BEGIN
                     LAF write_table_entry STR_VAR row="%kit%" column="%command%" arguments file=CLASWEAP END
                  END
                  "dual_to_\(fighter\|cleric\|mage\|thief\|druid\|ranger\)" BEGIN
                  ACTION_IF multiclassed BEGIN
                        FAIL "%command% is not valid for multi-classed characters"
                  END
                     OUTER_PATCH_SAVE command "%command%" BEGIN
                        DELETE_BYTES 0x0 8
                     END
                     LAF write_table_entry STR_VAR row="%kit%" column="%command%" arguments file=DUALCLAS END
                  END
                  "prof_.*" "proficiency_.*" BEGIN
                     OUTER_PATCH_SAVE command "%command%" BEGIN
                        REPLACE_TEXTUALLY "prof_" ""
                        REPLACE_TEXTUALLY "proficiency_" ""
                     END
                     LAF write_table_entry INT_VAR do_not_insert=1 STR_VAR row="%command%" column="%kit%" file=WEAPPROF arguments END
                  END
                  "initial_\(pick_pockets\|open_locks\|find_traps\|move_silently\|hide_in_shadows\|detect_illusion\|set_traps\)" BEGIN
                     ACTION_IF enhanced_edition BEGIN
                        OUTER_PATCH_SAVE command "%command%" BEGIN
                           DELETE_BYTES 0x0 8
                        END
                        LAF write_table_entry STR_VAR row="%command%" column="%kit%" arguments file=clasiskl END
                     END ELSE BEGIN
                        LAF warning STR_VAR warning="Initial thief skills can only be edited on the Enhanced Edition of the game" END
                     END
                  END
                  gets_prof_apr unarmed_divisor zero_skill_thac0 BEGIN
                     ACTION_IF enhanced_edition BEGIN
                        LAF write_table_entry STR_VAR row="%kit%" column="%command%" arguments file=clswpbon END
                     END ELSE BEGIN
                        LAF warning STR_VAR warning="values in 'clswpbon' can only be edited on the Enhanced Edition of the game" END
                     END
                  END
                  hp_table BEGIN
                     ACTION_IF enhanced_edition BEGIN
                        LAF write_table_entry STR_VAR row="%kit%" column=table arguments file=hpclass END
                     END ELSE BEGIN
                        LAF warning STR_VAR warning="The hit point table used by a class or kit can only be edited on the Enhanced Edition of the game" END
                     END
                  END
                  weapon_slots BEGIN
                     ACTION_IF enhanced_edition BEGIN
                         LAF write_table_entry STR_VAR row="%kit%" column=slots file=numwslot arguments END
                     END ELSE BEGIN
                         LAF warning STR_VAR warning="The number of weapon slots available to a class or kit can only be edited in the Enhanced Edition of the game" END
                     END
                  END
                  "scale_\(stealth\|pick_pockets\|open_locks\|find_traps\|move_silently\|hide_in_shadows\|detect_illusion\|set_traps\)" BEGIN
                     ACTION_IF enhanced_edition BEGIN
                        OUTER_PATCH_SAVE command "%command%" BEGIN
                           DELETE_BYTES 0x0 6
                        END
                        LAF write_table_entry STR_VAR row="%command%" column="%kit%" arguments file=thiefscl END
                     END ELSE BEGIN
                        LAF warning STR_VAR warning="The scaling of thief skills can only be edited on the Enhanced Edition of the game" END
                     END
                  END
                  thief_start_points thief_level_points BEGIN
                     ACTION_IF enhanced_edition BEGIN
                         OUTER_PATCH_SAVE command "%command%" BEGIN
                            DELETE_BYTES 0x0 6
                         END
                         LAF write_table_entry STR_VAR row="%kit%" column="%command%" arguments file=thiefskl END
                     END ELSE BEGIN
                        LAF warning STR_VAR warning="The number of available thief skill points can only be edited on the Enhanced Edition of the game" END
                     END
                  END
                  trap_limit BEGIN
                      ACTION_IF enhanced_edition BEGIN
                         LAF write_table_entry STR_VAR row="%kit%" column=limit arguments file=traplimt END
                      END ELSE BEGIN
                         LAF warning STR_VAR warning="The maximum number of settable traps can only be edited on the Enhanced Edition of the game" END
                      END
                  END
                  available_to unavailable_to BEGIN
                     OUTER_PATCH_SAVE list "%arguments%" BEGIN
                            REPLACE_TEXTUALLY "\[" "" // we allow either format of entry here
                            REPLACE_TEXTUALLY "\]" ""
                     END
                     OUTER_WHILE "%list%" STRING_COMPARE "" BEGIN
                         LAF return_first_entry STR_VAR list RET entry list END
                         ACTION_IF !true_class BEGIN
                             LAF kit_race_notrueclass STR_VAR entry kit END
                         END ELSE BEGIN
                             LAF kit_race_trueclass STR_VAR entry kit END
                         END
                     END // end of WHILE loop
                  END // end of available_to section
                  fallen BEGIN   
                     ACTION_IF !true_class BEGIN  // lookup by IDS doesn't look reliable for CLASTEXT
                      ACTION_MATCH "%kit%" WITH
                            ABJURER CONJURER DIVINER ENCHANTER ILLUSIONIST INVOKER NECROMANCER TRANSMUTER
                        BEGIN
                            LAF write_table_entry STR_VAR row="%kit%" column=fallen arguments file=clastext END
                        END
                        WILDMAGE BEGIN
                            LAF write_table_entry STR_VAR row=WILD_MAGE column=fallen arguments file=clastext END
                        END
                        DEFAULT
                             LAF write_table_entry INT_VAR lookup_column=2 STR_VAR row="%kit_id%" column=fallen arguments file=clastext END
                        END
                     END ELSE BEGIN
                        LAF write_table_entry INT_VAR lookup_column=2 STR_VAR row="%class_id%" column=fallen arguments file=clastext END
                     END

                  END
                  set_name say_name BEGIN
                     ACTION_IF "%command%" STRING_EQUAL_CASE "%say_name%" BEGIN
                       LAF strref_of_tra STR_VAR arguments RET mixed=value END
                       ACTION_GET_STRREF mixed mixed_string
                       ACTION_TO_LOWER mixed_string
                       OUTER_SET lower=RESOLVE_STR_REF ("%mixed_string%")
                     END ELSE BEGIN
                       OUTER_SET mixed=RESOLVE_STR_REF ("%arguments%")
                       ACTION_TO_LOWER arguments
                       OUTER_SET lower=RESOLVE_STR_REF ("%arguments%")
                     END
                     ACTION_IF !true_class BEGIN  
                      LAF write_table_entry INT_VAR lookup_column=1 STR_VAR row="%kit%" column=lower arguments="%lower%" file=kitlist END
                      LAF write_table_entry INT_VAR lookup_column=1 STR_VAR row="%kit%" column=mixed arguments="%mixed%" file=kitlist END
                      ACTION_IF enhanced_edition BEGIN // now CLASTEXT, for enhanced
                      // lookup by IDS doesn't look reliable for CLASTEXT
                       ACTION_MATCH "%kit%" WITH
                            ABJURER CONJURER DIVINER ENCHANTER ILLUSIONIST INVOKER NECROMANCER TRANSMUTER
                        BEGIN
                            LAF write_table_entry  STR_VAR row="%kit%" column=lower arguments="%lower%" file=clastext END
                            LAF write_table_entry  STR_VAR row="%kit%" column=mixed arguments="%mixed%" file=clastext END
                        END
                        WILDMAGE BEGIN
                            LAF write_table_entry  STR_VAR row=WILD_MAGE column=lower arguments="%lower%" file=clastext END
                            LAF write_table_entry  STR_VAR row=WILD_MAGE column=mixed arguments="%mixed%" file=clastext END
                        END
                        DEFAULT
                             LAF write_table_entry INT_VAR lookup_column=2 STR_VAR row="%kit_id%" column=lower arguments="%lower%" file=clastext END
                             LAF write_table_entry INT_VAR lookup_column=2 STR_VAR row="%kit_id%" column=mixed arguments="%mixed%" file=clastext END
                        END
                       END
                     END ELSE BEGIN
                      ACTION_IF enhanced_edition BEGIN
                        LAF write_table_entry INT_VAR lookup_column=2 STR_VAR row="%class_id%" column=lower arguments="%lower%" file=clastext END
                        LAF write_table_entry INT_VAR lookup_column=2 STR_VAR row="%class_id%" column=mixed arguments="%mixed%" file=clastext END
                      END ELSE BEGIN
                        LAF warning STR_VAR warning="Names of classes can only (readily) be edited on the Enhanced Edition of the game" END
                      END
                     END
                  END
                  set_biography say_biography biography_strref BEGIN
                    ACTION_IF !enhanced_edition BEGIN
                      LAF warning STR_VAR warning="Biographies can only be edited on the Enhanced Edition of the game" END
                    END ELSE BEGIN
                      ACTION_MATCH "%command%" WITH
                      set_biography BEGIN
                          OUTER_SET strref=RESOLVE_STR_REF ("%arguments%")
                      END
                      say_biography BEGIN
                          LAF strref_of_tra STR_VAR arguments RET strref=value END
                      END
                      DEFAULT
                         OUTER_SET strref=arguments
                      END
                      ACTION_IF !true_class BEGIN  // lookup by IDS doesn't look reliable for CLASTEXT
                      ACTION_MATCH "%kit%" WITH
                            ABJURER CONJURER DIVINER ENCHANTER ILLUSIONIST INVOKER NECROMANCER TRANSMUTER
                        BEGIN
                            LAF write_table_entry STR_VAR row="%kit%" column=biography arguments="%strref%" file=clastext END
                        END
                        WILDMAGE BEGIN
                            LAF write_table_entry STR_VAR row=WILD_MAGE column=biography arguments="%strref%" file=clastext END
                        END
                        DEFAULT
                             LAF write_table_entry INT_VAR lookup_column=2 STR_VAR row="%kit_id%" column=biography arguments="%strref%" file=clastext END
                        END
                     END ELSE BEGIN
                        LAF write_table_entry INT_VAR lookup_column=2 STR_VAR row="%class_id%" column=biography arguments="%strref%" file=clastext END
                     END
                    END
                  END
                  set_description say_description description_strref BEGIN
                      ACTION_MATCH "%command%" WITH
                      set_description BEGIN
                          OUTER_SET strref=RESOLVE_STR_REF ("%arguments%")
                      END
                      say_description BEGIN
                          LAF strref_of_tra STR_VAR arguments RET strref=value END
                      END
                      DEFAULT
                         OUTER_SET strref=arguments
                      END
                      ACTION_IF !true_class BEGIN
                        // first KITLIST
                       LAF write_table_entry INT_VAR lookup_column=1 STR_VAR row="%kit%" column=help arguments="%strref%" file=kitlist END
                        // then, on enhanced edition, CLASTEXT
                       ACTION_IF enhanced_edition BEGIN
                       // lookup by IDS doesn't look reliable for CLASTEXT
                        ACTION_MATCH "%kit%" WITH
                            ABJURER CONJURER DIVINER ENCHANTER ILLUSIONIST INVOKER NECROMANCER TRANSMUTER
                        BEGIN
                            LAF write_table_entry STR_VAR row="%kit%" column=descstr arguments="%strref%" file=clastext END
                        END
                        WILDMAGE BEGIN
                            LAF write_table_entry  STR_VAR row=WILD_MAGE column=descstr arguments="%strref%" file=clastext END
                        END
                        DEFAULT
                             LAF write_table_entry INT_VAR lookup_column=2 STR_VAR row="%kit_id%" column=descstr arguments="%strref%" file=clastext END
                        END
                       END
                     END ELSE BEGIN
                       ACTION_IF enhanced_edition BEGIN
                        LAF write_table_entry STR_VAR row="%class" column=descstr arguments="%strref%" file=clastext END
                       END ELSE BEGIN
                        LAF warning STR_VAR warning="Class descriptions can only be (readily) edited on the Enhanced version of the game" END
                       END
                     END
                  END
                  patch_description_strref BEGIN
                     ACTION_IF !true_class BEGIN
                       LAF read_table_entry INT_VAR lookup_column=1 STR_VAR row="%kit%" column=help file=kitlist RET strref=value END
                     END ELSE BEGIN
                       ACTION_IF enhanced_edition BEGIN
                        LAF read_table_entry STR_VAR row="%parent_class%" column=descstr file=clastext RET strref=value END
                       END ELSE BEGIN // use the BG2 default values
                        ACTION_IF VARIABLE_IS_SET $default_class_descriptions("%class_id%") BEGIN
                           OUTER_SET strref=$default_class_descriptions("%class_id%")
                        END ELSE BEGIN
                           OUTER_SET strref="-1"
                           LAF warning STR_VAR warning="You are on the vanilla (non-enhanced) game but are editing the string of an unrecognised class" END
                        END
                       END
                     END
                     ACTION_IF strref>=0 BEGIN
                             LAF apply_function_to_tlk_entry INT_VAR tlk_entry=strref STR_VAR arguments END
                     END
                  END
                  metal minor_cloth main_cloth leather armor BEGIN
                     LAF write_table_entry STR_VAR row="%command%" column="%kit%" arguments file=clascolr END
                  END
                  armor shield helm bag ring1 ring2 cloak boots amulet bracers belt ammo1 ammo2 ammo3 misc1 misc2 misc3 misc4 misc5 weapon1 BEGIN
                     LAF write_table_entry STR_VAR rol="%command%" column="%kit%" arguments file=25stweap END
                  END
                  backstab BEGIN
                      ACTION_IF enhanced_edition BEGIN
                         COPY_EXISTING backstab.2da override
                            COUNT_2DA_COLS colcount
                         BUT_ONLY
                         OUTER_FOR (i=0;i<colcount - 1;i+=1) BEGIN
                               LAF evaluate_expression STR_VAR expression="%arguments%" arguments="%i%" RET value END
                               LAF write_table_entry STR_VAR row="%kit%" column="%i%" arguments="%value%" file=backstab END
                         END
                      END ELSE BEGIN
                         LAF warning STR_VAR warning="The backstab multiplier can only be edited on the Enhanced Edition of the game" END
                      END
                  END
                  DEFAULT
                      FAIL "%command% is not a recognised command for edit_kit"
                  END
END

DEFINE_ACTION_FUNCTION standardize_race
    STR_VAR arguments=""
    RET value
BEGIN
                       ACTION_MATCH "%arguments%" WITH
                       half-elf halfelf half-elven halfelven half_elven BEGIN
                          OUTER_SPRINT value "half_elf"
                       END
                       half-orc half_orc BEGIN
                          OUTER_SPRINT value halforc
                       END
                       dwarven BEGIN
                          OUTER_SPRINT value dwarf
                       END
                       elven BEGIN
                          OUTER_SPRINT value elf
                       END
                       DEFAULT 
                          OUTER_SPRINT value "%arguments%"
                       END
                       ACTION_TO_UPPER value
END

DEFINE_ACTION_FUNCTION standardize_kit
     STR_VAR arguments=""
     RET value
BEGIN
   ACTION_MATCH "%arguments%" WITH
   ARCHER BEGIN
     OUTER_SPRINT value FERALAN
   END
   AVENGER BEASTFRIEND BEGIN
     OUTER_SPRINT value BEAST_FRIEND
   END
   SORCEROR BEGIN
      OUTER_SPRINT value SORCERER
   END
   WIZARDSLAYER BEGIN
      OUTER_SPRINT value WIZARD_SLAYER
   END
   BOUNTYHUNTER BEGIN
      OUTER_SPRINT value BOUNTY_HUNTER
   END
   DEFAULT
      OUTER_SPRINT value "%arguments%"
   END
END


DEFINE_ACTION_FUNCTION kit_race_trueclass
   STR_VAR entry=""
           kit=""
BEGIN
                  ACTION_IF FILE_EXISTS_IN_GAME "clsrcreq.2da" BEGIN
                       LAF standardize_race STR_VAR arguments="%entry%" RET entry=value END
                       ACTION_IF "%command%" STRING_EQUAL_CASE available_to BEGIN
                          OUTER_SET to_write=1
                       END ELSE BEGIN
                          OUTER_SET to_write=0
                       END
                       LAF write_table_entry STR_VAR row="%kit%" column="%entry%" arguments="%to_write%" file=clsrcreq END
                  END ELSE BEGIN
                     LAF warning STR_VAR warning="Core-class race availability can only be edited in the Enhanced Edition or on ToBEx" END
                  END
END

DEFINE_ACTION_FUNCTION kit_race_mage
   STR_VAR entry=""
           kit=""
BEGIN
                ACTION_IF FILE_EXISTS_IN_GAME "clsrcreq.2da" BEGIN
                       LAF standardize_race STR_VAR arguments="%entry%" RET entry=value END
                        ACTION_IF "%command%" STRING_EQUAL_CASE available_to BEGIN
                          OUTER_SET to_write=1
                       END ELSE BEGIN
                          OUTER_SET to_write=0
                       END
                       LAF write_table_entry STR_VAR row="%kit%" column="%entry%" arguments="%to_write%" file=mgsrcreq END
                  END ELSE BEGIN
                     LAF warning STR_VAR warning="Speciality-mage race availability can only be edited in the Enhanced Edition or on ToBEx" END
                  END
END


DEFINE_ACTION_FUNCTION kit_race_notrueclass
   STR_VAR entry=""
           kit=""
BEGIN
  ACTION_MATCH "%kit%" WITH
     ABJURER CONJURER DIVINER ENCHANTER ILLUSIONIST INVOKER NECROMANCER TRANSMUTER WILDMAGE 
  BEGIN
     LAF kit_race_mage STR_VAR entry kit END
  END
  DEFAULT

     ACTION_DEFINE_ASSOCIATIVE_ARRAY kit_race_codes BEGIN
                           human=>h
                           elf=>e
                           elven=>e
                           dwarf=>d
                           dwarven=>d
                           halfelf=>he
                           half-elf=>he
                           half_elf=>he
                           half-elven=>he
                           halfelven=>he
                           half_elven=>he
                           halfling=>hl
                           gnome=>g
                           halforc=>ho
                           half-orc=>ho
                           half_orc=>ho
    END
    ACTION_DEFINE_ASSOCIATIVE_ARRAY kit_class_codes BEGIN
                           bard=>b
                           cleric=>c
                           priest=>c
                           druid=>d
                           fighter=>f
                           monk=>mn
                           paladin=>p
                           ranger=>r
                           sorceror=>s
                           sorcerer=>s
                           thief=>t
    END
    ACTION_TO_LOWER entry
    OUTER_SPRINT racecode $kit_race_codes("%entry%")
    ACTION_TO_LOWER parent_class
    OUTER_SPRINT classcode $kit_class_codes("%parent_class%")
    OUTER_SPRINT filename "K_%classcode%_%racecode%"
    ACTION_IF FILE_EXISTS_IN_GAME "%filename%.2da" BEGIN
                            COPY_EXISTING "%filename%.2da" override
                                  COUNT_2DA_ROWS 2 rowcount
                                  PATCH_IF "%command%" STRING_EQUAL_CASE unavailable_to BEGIN
                                     SET to_delete="-1"
                                     FOR (i=1;i<rowcount;i+=1) BEGIN
                                        READ_2DA_ENTRY i 1 2 this_row
                                        PATCH_IF this_row = kit_id BEGIN
                                           SET to_delete=i
                                           SET i=rowcount
                                        END
                                     END
                                     PATCH_IF to_delete>=0 BEGIN
                                        REMOVE_2DA_ROW to_delete 2 
                                        LPF renumber_rows END
                                     END
                                  END ELSE BEGIN
                                     SET is_present=0
                                     FOR (i=1;i<rowcount;i+=1) BEGIN
                                        READ_2DA_ENTRY i 1 2 this_row
                                        PATCH_IF this_row = kit_id BEGIN
                                           SET is_present=1
                                           SET i=rowcount
                                        END
                                     END
                                     PATCH_IF !is_present BEGIN
                                        INSERT_2DA_ROW rowcount 2 "999 %kit_id%"
                                        LPF renumber_rows END
                                     END
                                  END
                            BUT_ONLY // end of copy
       END
    END
END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////    General kit maker - edits all kits with given parent
/////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION edit_all_kits
      INT_VAR at_top_hla=0
              skip_trueclass=0
      STR_VAR editstring=""
              edits=""
              parent_class=""
              filter=""
BEGIN
   LAF make_clabs_unique END
   OUTER_SET class_id=IDS_OF_SYMBOL (class "%parent_class%")
   OUTER_SET continue=1
   ACTION_IF "%filter%" STRING_COMPARE "" BEGIN
       OUTER_PATCH "" BEGIN
         LPF "%filter%" STR_VAR arguments=BASECLASS RET continue=value END
       END
   END
   ACTION_IF continue && !skip_trueclass BEGIN
      LAF edit_kit INT_VAR at_top_hla STR_VAR edits editstring kit="%parent_class%" END
   END
   LAF find_clab STR_VAR kit="%parent_class%" RET clab END
   OUTER_SPRINT $done_clab("%clab%") ""
   COPY_EXISTING "kitlist.2da" "%workspace%"
            COUNT_2DA_COLS colcount
            COUNT_2DA_ROWS colcount rowcount
            LPF get_table_column_coordinate STR_VAR column=class RET colnum END
            FOR (i=1;i<rowcount;i+=1) BEGIN
               READ_2DA_ENTRY i colnum colcount this_id
               PATCH_IF this_id=class_id BEGIN
                  READ_2DA_ENTRY i 1 colcount kit
                  SET continue=1
                  PATCH_IF "%filter%" STRING_COMPARE "" BEGIN
                     LPF "%filter%" STR_VAR arguments="%kit%" RET continue=value END
                  END
                  PATCH_IF continue BEGIN
                    INNER_ACTION BEGIN
                     LAF find_clab STR_VAR kit RET clab END
                     ACTION_IF !VARIABLE_IS_SET $done_clab("%clab%") BEGIN
                        OUTER_SPRINT $done_clab("%clab%") ""
                        LAF edit_kit INT_VAR at_top_hla STR_VAR edits editstring kit END
                     END ELSE BEGIN
                        LAF edit_kit INT_VAR at_top_hla skip_clab=1 STR_VAR edits editstring kit END
                     END
                    END
                  END
               END
            END
   BUT_ONLY
END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////    Kit maker
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION make_kit
      STR_VAR editstring=""
              edits=""
              kit=""
              parent_class=""
BEGIN
 ACTION_IF FILE_CONTAINS_EVALUATED ("kitlist.2da" "%kit%") BEGIN
       LAF warning STR_VAR warning="Could not make kit %kit% as a kit of the same name already exists" END
 END ELSE BEGIN
   // sanity check
   ACTION_MATCH "%parent_class%" WITH
      FIGHTER PALADIN RANGER CLERIC DRUID THIEF BARD
   BEGIN END
   MONK SORCERER
   BEGIN
      ACTION_IF !enhanced_edition BEGIN
         FAIL "%parent_class% is only a legally kittable class in the Enhanced Edition"
      END
   END
   DEFAULT
      FAIL "%parent_class% is not a legal class to be kitted"
   END
   // initialise all the various files
   ACTION_FOR_EACH file IN clasweap abclasrq abclsmod abdcdsrq abdcscrq alignmnt dualclas backstab clswpbon hpclass numwslot thiefskl traplimt luabbr
   BEGIN
      ACTION_IF FILE_EXISTS_IN_GAME "%file%.2da" BEGIN
         LAF clone_row INT_VAR dont_complain=1 STR_VAR clone_from="%parent_class%" clone_to="%kit%" file END
      END
   END
   ACTION_FOR_EACH file IN  clascolr clasiskl clasthac thiefscl weapprof
   BEGIN
      ACTION_IF FILE_EXISTS_IN_GAME "%file%.2da" BEGIN
         LAF clone_column INT_VAR dont_complain=1 STR_VAR clone_from="%parent_class%" clone_to="%kit%" file END
      END
   END
   LAF clone_column STR_VAR file=25stweap clone_from="%parent_class%" clone_to="%kit%" add_before="default" END
   // set up base class abilities
   LAF find_next_unused_clab INT_VAR clone=1 STR_VAR parent_class RET clab END
   LAF find_next_unused_lua INT_VAR clone=1 STR_VAR parent_class RET lua END

   // find an IDS entry

   LAF find_spare_kit_ids RET idsnum END
   LAF ensure_hex INT_VAR in=idsnum RET idsnum=out END
   APPEND kit.ids "%idsnum% %kit%"
   LAF ensure_hex INT_VAR in=idsnum pad_length=8 RET idsnum=out END

   // set up the entry in KITLIST

   // first get the proficiency code (column index in WEAPPROF)
   
   COPY_EXISTING weapprof.2da "%workspace%"
        COUNT_2DA_COLS colcount
        SET prof_num = colcount - 2
   BUT_ONLY
   
   // get the ID of the parent class

   OUTER_SET class_id = IDS_OF_SYMBOL (class "%parent_class%")

   OUTER_SPRINT to_add "%kit% -1 -1 -1 %clab% %prof_num% 0x00004000 %class_id%"
   ACTION_IF enhanced_edition BEGIN
     OUTER_SPRINT to_add "%to_add% %idsnum%"
   END
   
   // add the string

   COPY_EXISTING kitlist.2da override
      LPF append_numbered_row STR_VAR arguments="%to_add%" RET kit_id=value END
      PRETTY_PRINT_2DA

   // on the enhanced edition, set up the entry in CLASTEXT

    // start by clearing out any cruft from CLASTEXT (i.e. entries not
    // corresponding to a kit in KITLIST)
   ACTION_IF enhanced_edition BEGIN
      LAF delete_table_row INT_VAR lookup_column=2 STR_VAR file=clastext row="%kit_id%" END
      OUTER_SPRINT to_add "%kit% %class_id% %kit_id% -1 -1 -1 -1 0"
      APPEND clastext.2da "%to_add%"
      COPY_EXISTING clastext.2da override PRETTY_PRINT_2DA
   END
   
   // apply patches
   
   LAF edit_kit STR_VAR kit edits editstring END

 END
END

DEFINE_ACTION_FUNCTION find_spare_kit_ids
    INT_VAR to_start=0x4025
    RET idsnum
BEGIN
    LAF ensure_hex INT_VAR in=to_start RET out END
    ACTION_IF !FILE_CONTAINS_EVALUATED ("kit.ids" "%out%[ %TAB%]") BEGIN
         OUTER_SET idsnum=to_start
    END ELSE BEGIN
         LAF find_spare_kit_ids INT_VAR to_start = to_start + 1 RET idsnum END
    END
END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////    General clab editor
/////    (Intended basically to be called from within edit_kit)
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION edit_clab
      STR_VAR editstring=""
              edits=""
              kit=""
BEGIN
     // find and read in the CLAB file
     LAF find_clab STR_VAR kit RET clab END
     PRINT "editing %clab% for %kit%"
     // if it doesn't exist, make it
     ACTION_IF !FILE_EXISTS_IN_GAME "%clab%.2da" BEGIN
        OUTER_SPRINT row ""
        OUTER_SPRINT row2 "ABILITY1"
        OUTER_FOR (i=1;i<=40;i+=1) BEGIN
           OUTER_SPRINT row "%row% %i%"
           OUTER_SPRINT row2 "%row2% ****"
        END

<<<<<<<< .../stratagems-inline/clab_template.2da
2DA V1.0
****
%row%
%row2%
>>>>>>>>
        COPY ".../stratagems-inline/clab_template.2da" "override/%clab%.2da" EVALUATE_BUFFER PRETTY_PRINT_2DA
     END
     COPY_EXISTING "%clab%.2da" override
          // read in the data
          LPF find_clab_levels RET max_level END
          SET colcount=max_level + 1
          READ_2DA_ENTRIES_NOW clab_data colcount
          FOR (level=1;level<=max_level;level+=1) BEGIN
             SPRINT abil_temp ""
             FOR (i=0;i<clab_data;i+=1) BEGIN
                  READ_2DA_ENTRY_FORMER clab_data i level  abil_here
                  PATCH_MATCH "%abil_here%" WITH
                  "\*+." BEGIN END
                  DEFAULT
                     SPRINT abil_temp "%abil_temp% %abil_here%"
                  END
             END
             SPRINT $abil("%level%") "%abil_temp%"
          END
          // process edits
          WHILE "%editstring%" STRING_COMPARE "" BEGIN
             LPF return_first_pair STR_VAR list="%editstring%" RET command=key argument=value editstring=list END
             PATCH_MATCH "%command%" WITH
             remove_power BEGIN
                 PATCH_MATCH "%argument%" WITH
                 "[^ ]+ +[0-9]+" BEGIN END
                 "[^ ]+" BEGIN END
                 DEFAULT
                    PATCH_FAIL "The argument for %command% is '%argument%', which is not valid syntax. (The right format is 'SPELLNAME level_to_delete', or 'SPELLNAME' for deletion at all levels, or 'all'.)."
                 END
                 LPF return_first_entry STR_VAR list="%argument%" RET spell=entry level=list END
                 PATCH_IF "%level%" STRING_COMPARE "" BEGIN // if argument has the form "spell n", remove at level n
                     LPF CLAB_remove_ability INT_VAR level STR_VAR spell RET string=string END
                     SPRINT $abil("%level%") "%string%"
                 END ELSE BEGIN  // otherwise remove at all levels
                     FOR (level=1;level<=max_level;level+=1) BEGIN
                        LPF CLAB_remove_ability INT_VAR level STR_VAR spell RET string=string END
                        SPRINT $abil("%level%") "%string%"
                     END
                 END
             END
             grant_power apply_power BEGIN
                 PATCH_MATCH "%argument%" WITH 
                 "[^ ]+ +[0-9]+ +[0-9]+ +[0-9]+" BEGIN END
                 "[^ ]+ +[0-9]+ +[0-9]+" BEGIN END
                 "[^ ]+ +[0-9]+" BEGIN END
                 DEFAULT
                    PATCH_FAIL "The argument for %command% is '%argument%', which is not valid syntax. (The right format is 'SPELLNAME level_to_receive' or 'SPELLNAME level_to_receive every_this_many_levels', or 'SPELLNAME level_to_receive every_this_many_levels if_at_most_this_level)."
                 END
                 LPF return_first_entry STR_VAR list="%argument%" RET spell=entry list=list END  // syntax is "spell n m" - granted at level n and every mth thereafter
                 LPF return_first_entry STR_VAR list RET level=entry list END
                 PATCH_IF "%list%" STRING_EQUAL "" BEGIN 
                    SET rec=99  // if no recurrence, don't recur
                    SET max_here=max_level 
                 END
                 ELSE BEGIN
                    LPF return_first_entry STR_VAR list RET rec=entry max_here=list END
                    PATCH_IF "%max_here%" STRING_EQUAL "" BEGIN SET max_here=max_level END
                    ELSE BEGIN
                       PATCH_IF max_here > max_level BEGIN
                          SET max_here = max_level
                       END
                    END
                 END
                 PATCH_IF rec<=0 BEGIN SET rec=99 END // guard against infinite loops
                 WHILE level<=max_here BEGIN
                      LPF CLAB_add_ability INT_VAR level STR_VAR spell type="%command%" RET string=string END
                      SPRINT $abil("%level%") "%string%"
                      SET level += rec
                 END
             END
             DEFAULT
                 PATCH_FAIL "%command% is not a valid argument for edit_clab"
             END
          END
     BUT_ONLY
     LAF CLAB_write INT_VAR max_level STR_VAR clab END
END

DEFINE_PATCH_FUNCTION CLAB_remove_ability // return a string which is the resources at given level, minus the spell listed. (Limitations of WEIDU mean we have to stick it in manually)
   INT_VAR level=1
   STR_VAR spell=""
   RET string
BEGIN
 LPF deabbreviate_spellname STR_VAR input="%spell%" RET spell=spellname END
 PATCH_IF "%spell%" STRING_EQUAL_CASE "all" BEGIN
    SPRINT string ""
 END ELSE BEGIN
   PATCH_IF VARIABLE_IS_SET "%spell%" BEGIN
        SPRINT spell EVALUATE_BUFFER "%%spell%%"
   END
   SPRINT string $abil("%level%")
   INNER_PATCH_SAVE string "%string%" BEGIN
      REPLACE_TEXTUALLY CASE_INSENSITIVE "\(GA\|AP\)_%spell%" ""
   END
 END
END

DEFINE_PATCH_FUNCTION CLAB_add_ability // return a string which is the resources at given level, plus the specified ability. (Limitations of WEIDU mean we have to stick it in manually)
    INT_VAR level=1
    STR_VAR spell=""
            type=""
    RET string
BEGIN
    LPF deabbreviate_spellname STR_VAR input="%spell%" RET spell=spellname END
    PATCH_IF VARIABLE_IS_SET "%spell%" BEGIN
        SPRINT spell EVALUATE_BUFFER "%%spell%%"
    END
    SPRINT string $abil("%level%")
    PATCH_MATCH "%type%" WITH
        apply_power BEGIN
              SPRINT string "%string% AP_%spell%"
        END
        grant_power BEGIN
              SPRINT string "%string% GA_%spell%"
        END
        DEFAULT PATCH_FAIL "shouldn't happen (CLAB)" END
END

DEFINE_ACTION_FUNCTION find_clab // find the CLAB file for a particular kit
    STR_VAR kit=""
    RET clab
BEGIN
   LAF standardize_kit STR_VAR arguments="%kit%" RET kit=value END
    // handle mismatches between class.ids and kitlist.ids
    ACTION_MATCH "%kit%" WITH
    "GOD.*" BEGIN
         OUTER_PATCH_SAVE kit "%kit%" BEGIN
            DELETE_BYTES 0x0 3
         END
    END
    "MAGESCHOOL_GENERALIST" BEGIN
       OUTER_SPRINT kit MAGE
    END
    "MAGESCHOOL_.*" BEGIN
         OUTER_PATCH_SAVE kit "%kit%" BEGIN
            DELETE_BYTES 0x0 11
         END
    END
    DEFAULT
    END
    OUTER_SPRINT clab unknown_clab
    COPY_EXISTING kitlist.2da "%workspace%"
         READ_2DA_ENTRIES_NOW kitlist_data 6
         FOR (i=0;i<kitlist_data;i+=1) BEGIN
            READ_2DA_ENTRY_FORMER kitlist_data i 1 this_kit
            PATCH_IF "%this_kit%" STRING_EQUAL_CASE "%kit%" BEGIN
               READ_2DA_ENTRY_FORMER kitlist_data i 5 clab
               SET i=kitlist_data
            END
         END
    BUT_ONLY
    ACTION_IF "%clab%" STRING_EQUAL unknown_clab BEGIN
       ACTION_TO_UPPER kit
       // assume it's a base class
       ACTION_CLEAR_ARRAY class_clab
       ACTION_DEFINE_ASSOCIATIVE_ARRAY class_clab BEGIN
          FIGHTER=>FI01
          RANGER=>RN01
          PALADIN=>PA01
          MONK=>MO01
          CLERIC=>PR01
          PRIEST=>PR01
          DRUID=>DR01
          MAGE=> MA01
          SORCEROR=>MA01
          SORCERER=>MA01
          SHAMAN=>SH01
          THIEF=>TH01
          BARD=>BA01
       END
       ACTION_IF VARIABLE_IS_SET $class_clab("%kit%") BEGIN
          OUTER_SPRINT clab EVALUATE_BUFFER "CLAB%class_clab_%kit%%"
       END ELSE BEGIN
           LAF warning STR_VAR warning="Cannot find clab file for kit %kit%" END
       END
    END
END

DEFINE_ACTION_FUNCTION CLAB_write // create the CLAB file (wipes existing one, all data - hopefully - already imported)
    INT_VAR max_level=0
    STR_VAR clab=""
BEGIN
<<<<<<<< .../stratagems-inline/clab_template.2da
2DA V1.0
****
>>>>>>>>
    COPY ".../stratagems-inline/clab_template.2da" "override/%clab%.2da"
    OUTER_SPRINT topline "           "
    OUTER_FOR (level=1;level<=max_level;level+=1) BEGIN
       LAF prettify_clab_entry STR_VAR entry="%level%" RET level_new=entry_new END
       OUTER_SPRINT topline "%topline% %level_new%"
    END
    APPEND "%clab%.2da" "%topline%"
    OUTER_SET done=0
    OUTER_SET rowcount=0
    OUTER_WHILE !done BEGIN
         OUTER_SET done=1
         OUTER_SET rowcount +=1
         OUTER_SPRINT row "ABILITY%rowcount%   "

         OUTER_FOR (level=1;level<=max_level;level+=1) BEGIN
            OUTER_SPRINT temp $abil("%level%")
            ACTION_IF "%temp%" STRING_MATCHES_REGEXP " *$" BEGIN
               OUTER_SET done=0
               LAF return_first_entry STR_VAR list="%temp%" RET entry=entry temp=list END
               OUTER_SPRINT $abil("%level%") "%temp%"
               LAF prettify_clab_entry STR_VAR entry RET entry=entry_new END
               OUTER_SPRINT row "%row% %entry%"
            END ELSE BEGIN
               OUTER_SPRINT row "%row% ****       "
            END
            ACTION_IF !done BEGIN

            END
         END
         ACTION_IF !done BEGIN
             APPEND "%clab%.2da" "%row%"
         END
    END
END



DEFINE_ACTION_FUNCTION prettify_clab_entry
   STR_VAR entry=""
   RET entry_new
BEGIN
   OUTER_PATCH_SAVE entry_new "           " BEGIN
      WRITE_ASCII 0x0 "%entry%"
   END
END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////    General HLA editor
/////    (Intended basically to be called from within edit_kit)
/////
/////      Syntax: grant|apply_hla => file list
/////              remove_hla => file list
/////              restrict_hla => key=> value list
/////
/////              where the most general restrict_hla command is 
/////              hla=>file [required]
/////              min_level=>int
/////              max_level=>int
/////              num_allowed=>int
/////              prerequisite|excluded_by=>file [must already be in the lua]
/////              alignment_restrict|exclude_alignment =>  good|evil
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION  edit_lua
        INT_VAR at_top=0
        STR_VAR
            kit=""
            lua=""
            editstring=""
BEGIN
       ACTION_IF "%lua%" STRING_EQUAL "" BEGIN
          LAF resolve_lua STR_VAR kit RET lua END
       END
       // if it doesn't exist, make it
       ACTION_IF !FILE_EXISTS_IN_GAME "%lua%.2da" BEGIN
<<<<<<<< .../stratagems-inline/lua_template.2da
       2DA V1.0
*
        ABILITY       ICON        STRREF    MIN_LEV   MAX_LEVEL  NUM_ALLOWED  PREREQUISITE EXCLUDED_BY   ALIGNMENT_RESTRICT
>>>>>>>>
          COPY ".../stratagems-inline/lua_template.2da" "override/%lua%.2da"
       END
       COPY_EXISTING "%lua%.2da" override
            // parametrise file
            COUNT_2DA_COLS colcount
            COUNT_2DA_ROWS colcount rowcount
            // read in the list of powers
            SET number_of_powers=0
            FOR (i=0;i<rowcount;i+=1) BEGIN
               READ_2DA_ENTRY i 1 colcount entry
               PATCH_MATCH "%entry%" WITH
                  "GA_.*" "AP_.*" BEGIN
                      INNER_PATCH_SAVE spell "%entry%" BEGIN
                         READ_ASCII 0x0 type (2)
                         DELETE_BYTES 0x0 3
                      END
                      TO_UPPER spell
                      SPRINT $hla_type("%spell%") "%type%"
                  END
                  DEFAULT
                     SET number_of_powers=i
                     SET i=rowcount
                  END
            END
       BUT_ONLY
       // parse argument
       OUTER_WHILE "%editstring%" STRING_COMPARE "" BEGIN
          LAF return_first_pair STR_VAR list="%editstring%" RET command=key arguments=value editstring=list END
          ACTION_MATCH "%command%" WITH
          grant_hla apply_hla BEGIN
            OUTER_WHILE "%arguments%" STRING_COMPARE "" BEGIN
              LAF return_first_entry STR_VAR list="%arguments%" RET spell=entry arguments=list END
              LAF deabbreviate_spellname STR_VAR input="%spell%" RET spell=spellname END
              ACTION_IF VARIABLE_IS_SET "%spell%" BEGIN
                   OUTER_SPRINT spell EVALUATE_BUFFER "%%spell%%"
              END
              ACTION_TO_UPPER spell
              ACTION_IF VARIABLE_IS_SET $hla_type("%spell%") BEGIN
               LAF warning STR_VAR warning="Tried to add hla %spell% but it is already there" END
              END ELSE BEGIN
               ACTION_IF "%command%" STRING_EQUAL_CASE "grant_hla" BEGIN
                 OUTER_SPRINT type GA
               END ELSE BEGIN
                 OUTER_SPRINT type AP
               END
               OUTER_SET number_of_powers +=1 
               ACTION_IF at_top BEGIN
                COPY_EXISTING "%lua%.2da" override
                  COUNT_2DA_COLS colcount
                  SPRINT insert "insert_here"
                  FOR (i=1;i<colcount;i+=1) BEGIN
                      SPRINT insert "%insert% * "
                  END
                  INSERT_2DA_ROW 0 colcount "%insert%"
                  SPRINT write_point insert_here
               BUT_ONLY
               END ELSE BEGIN
                  OUTER_SET write_point="%number_of_powers%"
               END
               LAF write_table_entry STR_VAR row="%write_point%" column=ability arguments="%type%_%spell%" file="%lua%" default_fill="*" END
               LAF write_table_entry STR_VAR row="%write_point%" column=min_lev arguments=1 file="%lua%" END
               LAF write_table_entry STR_VAR row="%write_point%" column=max_level arguments=99 file="%lua%" END
               LAF write_table_entry STR_VAR row="%write_point%" column=num_allowed arguments=20 file="%lua%" END
               OUTER_SPRINT $hla_type("%spell%") "%type%"
              END
            END
          END
          remove_hla BEGIN
            ACTION_IF "%arguments%" STRING_EQUAL_CASE "all" BEGIN
              COPY_EXISTING "%lua%.2da" override
                  FOR (i=0;i<rowcount;i+=1) BEGIN
                     SET_2DA_ENTRY i 1 colcount "*"
                  END
              BUT_ONLY
            END ELSE BEGIN 
             OUTER_WHILE "%arguments%" STRING_COMPARE "" BEGIN
              LAF return_first_entry STR_VAR list="%arguments%" RET spell=entry arguments=list END
              LAF deabbreviate_spellname STR_VAR input="%spell%" RET spell=spellname END
              ACTION_IF VARIABLE_IS_SET "%spell%" BEGIN
                   OUTER_SPRINT spell EVALUATE_BUFFER "%%spell%%"
              END

              ACTION_TO_UPPER spell
              ACTION_IF VARIABLE_IS_SET $hla_type("%spell%") BEGIN
                 OUTER_SPRINT type $hla_type("%spell%")
                 OUTER_SPRINT to_remove "%type%_%spell%"
                 COPY_EXISTING "%lua%.2da" override
                      REPLACE_TEXTUALLY "%to_remove%" "*"
                 BUT_ONLY
              END
            END
           END
          END
          restrict_hla BEGIN
             // first pass - get the actual hla
             OUTER_SPRINT list "%arguments%"
             OUTER_WHILE "%list%" STRING_COMPARE "" BEGIN
                LAF return_first_pair STR_VAR list RET key value list END
                ACTION_IF "%key%" STRING_EQUAL_CASE "hla" BEGIN
                   OUTER_SPRINT hla_to_edit "%value%"
                   OUTER_SPRINT list ""
                END
             END

             LAF deabbreviate_spellname STR_VAR input="%hla_to_edit%" RET spell=spellname END
             ACTION_IF VARIABLE_IS_SET "%spell%" BEGIN
                     OUTER_SPRINT spell EVALUATE_BUFFER "%%spell%%"
             END
             ACTION_IF VARIABLE_IS_SET $hla_type("%spell%") BEGIN
                          OUTER_SPRINT temp $hla_type("%spell%")
                          OUTER_SPRINT row "%temp%_%spell%"
             END ELSE BEGIN
                          LAF warning STR_VAR warning="Tried to edit the restrictions on HLA %spell% while editing %lua%.2da, but it is not an HLA" END
                          OUTER_SPRINT arguments ""
             END
             // second pass - apply patches
             OUTER_WHILE "%arguments%" STRING_COMPARE "" BEGIN
                LAF return_first_pair STR_VAR list="%arguments%" RET key=key value=value arguments=list END
                ACTION_MATCH "%key%" WITH
                    hla BEGIN
                       OUTER_SPRINT column null
                    END
                    min_level min_lev BEGIN
                       OUTER_SPRINT column min_lev
                    END
                    max_level max_lev BEGIN
                       OUTER_SPRINT column max_level
                    END
                    num_allowed number_allowed BEGIN
                       OUTER_SPRINT column num_allowed
                    END
                    prerequisite_hardcode excluded_by_hardcode BEGIN
                       OUTER_PATCH_SAVE column "%key%" BEGIN
                          REPLACE_TEXTUALLY _hardcode ""
                       END
                       ACTION_TO_UPPER value
                    END
                    prerequisite excluded_by BEGIN
                       OUTER_SPRINT column "%key%"
                       LAF deabbreviate_spellname STR_VAR input="%value%" RET spell=spellname END
                       ACTION_IF VARIABLE_IS_SET "%spell%" BEGIN
                              OUTER_SPRINT spell EVALUATE_BUFFER "%%spell%%"
                       END
                       ACTION_TO_UPPER spell
                       ACTION_IF VARIABLE_IS_SET $hla_type("%spell%") BEGIN
                          OUTER_SPRINT temp $hla_type("%spell%")
                          OUTER_SPRINT value "%temp%_%spell%"
                       END ELSE BEGIN
                          LAF warning STR_VAR warning="Tried to use %spell% as a value of %command% while editing %lua%.2da, but it is not itself an HLA" END
                          OUTER_SPRINT column null
                       END
                    END
                    alignment_restrict exclude_alignment BEGIN
                       OUTER_SPRINT column ALIGNMENT_RESTRICT
                       ACTION_MATCH "%value%" WITH
                       good all_good
                       BEGIN
                            OUTER_SPRINT value ALL_GOOD
                       END
                       evil all_evil
                       BEGIN
                            OUTER_SPRINT value ALL_EVIL
                       END
                       DEFAULT
                            FAIL "I don't think %value% is a valid value for the ALIGNMENT_RESTRICT column of %lua%.2da"
                       END
                    END
                    DEFAULT
                       FAIL "%key% is not a valid patch command for the restrict_hla command"
                    END
                    ACTION_IF "%column%" STRING_COMPARE "null" BEGIN
                       LAF write_table_entry INT_VAR lookup_column=1 STR_VAR row column arguments="%value%" file="%lua%" END
                    END
             END
          END

          DEFAULT
             FAIL "%command% is not a valid argument for 'edit_hla'"
          END
       END
       // output new version
       COPY_EXISTING "%lua%.2da" override
             READ_2DA_ENTRIES_NOW lua_data colcount // get the data
             // wipe the file
             FOR (i=0;i<lua_data;i+=1) BEGIN
                REMOVE_2DA_ROW 0 colcount
             END
             SET entry_num=1
             FOR (i=0;i<lua_data;i+=1) BEGIN
                READ_2DA_ENTRY_FORMER lua_data i 1 spell
                PATCH_IF "%spell%" STRING_COMPARE "*" BEGIN
                   SPRINT row "%entry_num%"
                   FOR (j=1;j<colcount;j+=1) BEGIN
                      READ_2DA_ENTRY_FORMER lua_data i j temp
                      SPRINT row "%row% %temp%"
                   END
                   INSERT_2DA_ROW entry_num - 1 colcount "%row%"
                   SET entry_num +=1
                END
             END
             WHILE entry_num<25 BEGIN
                SPRINT row "%entry_num%"
                FOR (j=1; j< colcount;j+=1) BEGIN
                   SPRINT row "%row% *"
                END
                INSERT_2DA_ROW entry_num - 1 colcount "%row%"
                SET entry_num +=1
             END
             PRETTY_PRINT_2DA
       BUT_ONLY
END

//////////////////////////////////////////////////////////////////////////////////////////////////
/// Find LUA filename
//////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION resolve_lua
    STR_VAR kit=""
    RET lua
BEGIN
   LAF read_table_entry STR_VAR row="%kit%" column=abbrev file=luabbr RET value END
   OUTER_SPRINT lua "lu%value%"

END


//////////////////////////////////////////////////////////////////////////////////////////////////
/// Find unused CLAB filename
//////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION find_next_unused_clab 
    INT_VAR try_next=1 clone=0
    STR_VAR parent_class=""
    RET clab
BEGIN
    ACTION_IF try_next=100 BEGIN
       FAIL "You apparently have at least 100 kits of type %parent_class% installed?! This has given SFO a nervous breakdown, sorry..."
    END
       ACTION_CLEAR_ARRAY class_clab
       ACTION_DEFINE_ASSOCIATIVE_ARRAY class_clab BEGIN
          FIGHTER=>FI
          RANGER=>RN
          PALADIN=>PA
          MONK=>MO
          CLERIC=>PR
          DRUID=>DR
          MAGE=> MA
          SORCEROR=>SO
          SORCERER=>SO
          THIEF=>TH
          BARD=>BA
       END
       ACTION_TO_UPPER parent_class
       OUTER_SPRINT file_ext $class_clab("%parent_class%")
       ACTION_IF try_next<10 BEGIN
          OUTER_SPRINT file_to_try "CLAB%file_ext%0%try_next%"
       END ELSE BEGIN
          OUTER_SPRINT file_to_try "CLAB%file_ext%%try_next%"
       END

       ACTION_IF !FILE_EXISTS_IN_GAME "%file_to_try%.2da" BEGIN
          OUTER_SPRINT clab "%file_to_try%"
          ACTION_IF clone BEGIN
               COPY_EXISTING "CLAB%file_ext%01.2da" "override/%clab%.2da"
          END
       END ELSE BEGIN
          LAF find_next_unused_clab INT_VAR clone try_next=try_next + 1 STR_VAR parent_class RET clab END
       END
END

DEFINE_ACTION_FUNCTION find_next_unused_lua
     INT_VAR try_next=1 clone=0
     STR_VAR parent_class=""
     RET lua
BEGIN
     ACTION_CLEAR_ARRAY class_lua
     ACTION_DEFINE_ASSOCIATIVE_ARRAY class_lua BEGIN
         FIGHTER=>FI
         MAGE=>MA
         CLERIC=>CL
         THIEF=>TH
         BARD=>BA
         PALADIN=>PA
         DRUID=>DR
         RANGER=>RA
         MONK=>MO
         SORCERER=>SO
         SORCEROR=>SO
     END
     ACTION_TO_UPPER parent_class
     OUTER_SPRINT file_ext $class_lua("%parent_class%")
     OUTER_SPRINT file_to_try "lu%file_ext%%try_next%"
     ACTION_IF !FILE_EXISTS_IN_GAME "%file_to_try%.2da" BEGIN
          OUTER_SPRINT lua "%file_to_try%"
          ACTION_IF clone BEGIN
             COPY_EXISTING "lu%file_ext%1.2da" "override/%lua%.2da"
          END
     END ELSE BEGIN
          LAF find_next_unused_lua INT_VAR clone try_next=try_next+1 STR_VAR parent_class RET lua END
     END


END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////    Race editor
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION edit_race
      STR_VAR editstring=""
              edits=""
              race=""
BEGIN
          LAF standardize_race STR_VAR arguments="%race%" RET race=value END
          // process edits
          OUTER_WHILE "%editstring%" STRING_COMPARE "" BEGIN
             LAF return_first_pair STR_VAR list="%editstring%" RET command=key arguments=value editstring=list END
             LAF edit_race_parser STR_VAR race command arguments END
          END
          ACTION_PHP_EACH "%edits%" AS command=>arguments BEGIN
             LAF edit_race_parser STR_VAR race command arguments END
          END
END

DEFINE_ACTION_FUNCTION edit_race_parser
    STR_VAR command=""
            arguments=""
            race=""
BEGIN
    ACTION_MATCH "%command%" WITH
       "thac0_.*" BEGIN
            ACTION_IF FILE_EXISTS_IN_GAME "racethac.2da" BEGIN
                 OUTER_PATCH_SAVE prof "%command%" BEGIN
                       REPLACE_TEXTUALLY "thac0_" ""
                 END
                 LAF write_table_entry INT_VAR do_not_insert=1 lookup_column=1 STR_VAR row="%prof%" column="%race%" arguments file="racethac" END
            END ELSE BEGIN
                 LAF warning STR_VAR warning="Racial attack bonuses can only be edited on the Enhanced Edition" END
            END
       END
       hair skin BEGIN
            ACTION_IF FILE_EXISTS_IN_GAME "racecolr.2da" BEGIN
               LAF write_table_entry STR_VAR column="%race%" row="%command%" arguments file=racecolr END
            END ELSE BEGIN
               LAF warning STR_VAR warning="Racial starting colours can only be edited on the Enhanced Edition" END
            END
       END
       set_name say_name BEGIN
          ACTION_IF FILE_EXISTS_IN_GAME "racetext.2da" BEGIN
                ACTION_IF "%command%" STRING_EQUAL_CASE "%say_name%" BEGIN
                       LAF strref_of_tra STR_VAR arguments RET mixed=value END
                       ACTION_GET_STRREF mixed mixed_string
                       ACTION_TO_LOWER mixed_string
                       OUTER_SET lower=RESOLVE_STR_REF ("%mixed_string%")
                END ELSE BEGIN
                       OUTER_SET mixed=RESOLVE_STR_REF ("%arguments%")
                       ACTION_TO_LOWER arguments
                       OUTER_SET lower=RESOLVE_STR_REF ("%arguments%")
                END  
                LAF write_table_entry STR_VAR row="%race%" column=name file=racetext arguments="%lower%" END
                LAF write_table_entry STR_VAR row="%race%" column=uppercase file=racetext arguments="%mixed%" END
          END ELSE BEGIN
                LAF warning STR_VAR warning="Racial names can only be (readily) edited on the Enhanced Edition or on ToBEx" END
          END
       END
       "\(set\|say\)_description" BEGIN
          ACTION_IF FILE_EXISTS_IN_GAME "racetext.2da" BEGIN
                LAF return_first_entry STR_VAR list="%command%" separator="_" RET setorsay=entry END
                ACTION_IF "%setorsay%" STRING_EQUAL_CASE set BEGIN
                   OUTER_SET strref=RESOLVE_STR_REF ("%arguments%")
                END ELSE BEGIN
                   LAF strref_of_tra STR_VAR arguments RET strref=value END
                END
                LAF write_table_entry STR_VAR row="%race%" column=descstr file=racetext arguments="%strref%" END
          END ELSE BEGIN
                LAF warning STR_VAR warning="Racial descriptions only be (readily) edited on the Enhanced Edition or on ToBEx" END
          END
       END
       "\(set\|say\)_biography" BEGIN
          ACTION_IF enhanced_edition BEGIN
                LAF return_first_entry STR_VAR list="%command%" separator="_" RET setorsay=entry END
                ACTION_IF "%setorsay%" STRING_EQUAL_CASE set BEGIN
                   OUTER_SET strref=RESOLVE_STR_REF ("%arguments%")
                END ELSE BEGIN
                   LAF strref_of_tra STR_VAR arguments RET strref=value END
                END
                LAF write_table_entry STR_VAR row="%race%" column=biography file=racetext arguments="%strref%" END
          END ELSE BEGIN
                LAF warning STR_VAR warning="Racial biographies only be edited on the Enhanced Edition" END
          END
       END
    DEFAULT
       FAIL "%command% is not a valid command for edit_race"
    END
END

///////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION get_parent_class
    STR_VAR kit=""
    RET class_id parent_class true_class
BEGIN
    LAF read_table_entry INT_VAR lookup_column=1 dont_complain=1 STR_VAR row="%kit%" column=class file=kitlist RET class_id=value END
    ACTION_IF class_id<0 BEGIN
             OUTER_SET class_id= IDS_OF_SYMBOL (class "%kit%")
             OUTER_SET true_class=1
    END ELSE BEGIN
             OUTER_SET true_class=0
    END
    OUTER_PATCH "" BEGIN
             LOOKUP_IDS_SYMBOL_OF_INT parent_class class "%class_id%"
    END
END

///////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION make_luas_unique
BEGIN

   // get the data
   COPY_EXISTING "luabbr.2da" "%workspace%"
   OUTER_SPRINT read_array_location "%workspace%"
   OUTER_SPRINT array_to_read "luabbr.2da"
   OUTER_SPRINT array_name luabbr
   LAM read_in_assoc_array

   // go through as a first pass, to see what's in use
   ACTION_PHP_EACH luabbr AS kit=>lua BEGIN
     ACTION_IF ("%kit%" STRING_COMPARE_CASE 2da) BEGIN
        OUTER_SPRINT $in_luabbr("%lua%") ""
     END
   END

   // go through
   ACTION_PHP_EACH luabbr AS kit=>lua BEGIN
    ACTION_IF ("%kit%" STRING_COMPARE_CASE 2da) BEGIN
      ACTION_IF VARIABLE_IS_SET $in_use("%lua%") BEGIN
         OUTER_PATCH "%lua%" BEGIN
            READ_ASCII 0x0 prefix (2)
         END
         LAF make_luas_unique_helper STR_VAR prefix RET lua_new END
         OUTER_SPRINT $luabbr("%kit%") "%lua_new%"
         OUTER_SPRINT $in_use("%lua_new%") ""
         OUTER_SPRINT $in_luabbr("%lua_new%") ""
         COPY_EXISTING "lu%lua%.2da" "override/lu%lua_new%.2da"
      END ELSE BEGIN
         OUTER_SPRINT $in_use("%lua%") ""
      END
    END
   END
   // write out the updated luas
   COPY_EXISTING luabbr.2da override
        COUNT_2DA_ROWS 2 rowcount
        FOR (i=0;i<rowcount;i+=1) BEGIN
           READ_2DA_ENTRY i 0 2 kit
           PATCH_IF VARIABLE_IS_SET $luabbr("%kit%") BEGIN
              SPRINT temp $luabbr("%kit%")
              SET_2DA_ENTRY i 1 2 "%temp%"
           END
        END
   BUT_ONLY

END

DEFINE_ACTION_FUNCTION make_luas_unique_helper
    INT_VAR min=1
    STR_VAR prefix=""
    RET lua_new
BEGIN
    OUTER_SPRINT lua_new "%prefix%%min%"
    ACTION_IF VARIABLE_IS_SET $in_luabbr("%lua_new%") BEGIN
       ACTION_IF min=9 BEGIN
         LAF warning STR_VAR warning="Too many lua files; can't find unique one for %kit%" END
         OUTER_SPRINT lua_new "%prefix%0"
       END ELSE BEGIN
         OUTER_SET min +=1
         LAF make_luas_unique_helper INT_VAR min STR_VAR prefix RET lua_new END
       END
    END
END

///////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION resolve_parent_class
    STR_VAR kit=""
    RET parent_class
        multiclassed
        true_class
BEGIN
          LAF read_table_entry INT_VAR lookup_column=1 dont_complain=1 STR_VAR row="%kit%" column=class file=kitlist RET class_id=value END
          ACTION_IF class_id<0 BEGIN
             OUTER_SET class_id= IDS_OF_SYMBOL (class "%kit%")
             OUTER_SET true_class=1
          END ELSE BEGIN
             OUTER_SET true_class=0
          END
          ACTION_MATCH "%kit%" WITH
          FIGHTER_MAGE FIGHTER_CLERIC FIGHTER_THIEF FIGHTER_MAGE_THIEF FIGHTER_MAGE_CLERIC CLERIC_MAGE CLERIC_THIEF MAGE_THIEF FIGHTER_DRUID CLERIC_RANGER
          BEGIN
             OUTER_SET multiclassed=1
          END
          DEFAULT
             OUTER_SET multiclassed=0
          END
          ACTION_IF class_id<0 BEGIN
             LAF warning STR_VAR warning="%kit% is not a valid kit or class (does not appear in kitlist.2da or class.ids)" END
             OUTER_SPRINT parent_class "NOT_DEFINED"
          END
          OUTER_PATCH "" BEGIN
             LOOKUP_IDS_SYMBOL_OF_INT parent_class class "%class_id%"
          END
END

///////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION build_kit_spell_enforcer
     INT_VAR force_rebuild=0
             collect_apply=0
     STR_VAR kit=""
BEGIN


 ACTION_IF (!FILE_EXISTS "%workspace%/kit_spell_build.2da" || force_rebuild) BEGIN
  // mark things to ignore
   ACTION_FOR_EACH spellname IN SET_SNARE_TRAP BEGIN
       LAF get_spellcode STR_VAR input="%spellname%" RET resref=value END
       ACTION_TO_UPPER resref
       OUTER_SPRINT $kit_spell_ignore("%resref%") ""
   END



  COPY ".../stratagems-inline/blank" "%workspace%/kit_spell_build.tpa"
  ACTION_IF collect_apply BEGIN
       COPY ".../stratagems-inline/blank" "%workspace%/kit_collect_apply.txt"
  END
  APPEND_OUTER "%workspace%/kit_spell_build.tpa" ~DEFINE_PATCH_FUNCTION CRE_enforce_kit_spells_hardcoded INT_VAR level=1 full_delete=0 STR_VAR kit="" BEGIN~
  APPEND_OUTER "%workspace%/kit_spell_build.tpa" ~PATCH_MATCH "%percentage%kit%percentage%" WITH ~
  OUTER_WHILE "%kit%" STRING_COMPARE "" BEGIN
     LAF return_first_entry STR_VAR list="%kit%" RET kit=list kit_here=entry END
     LAF find_clab STR_VAR kit="%kit_here%" RET clab END
     ACTION_TO_LOWER kit_here
     WITH_SCOPE BEGIN
        COPY_EXISTING "%clab%.2da" "%workspace%"
             COUNT_2DA_COLS colcount
             READ_2DA_ENTRIES_NOW clab_entries colcount
             FOR (j=0;j<colcount;j+=1) BEGIN
                SET clab_level=j
                SPRINT add_this_level ""
                SPRINT apply_this_level ""
                FOR (i=0;i<clab_entries;i+=1) BEGIN
                    READ_2DA_ENTRY_FORMER clab_entries i j entry
                    SET to_add=0
                    SET to_apply=0
                    SET to_remove=0
                    SET to_delete=0
                    TO_UPPER entry
                    INNER_PATCH_SAVE spell "%entry%" BEGIN
                       READ_ASCII 0x0 type (3)
                       PATCH_MATCH "%type%" WITH
                       "GA_" BEGIN
                           DELETE_BYTES 0x0 3
                           SET to_add=1
                           SET to_remove=1
                       END
                       "AP_" BEGIN
                           DELETE_BYTES 0x0 3
                           SET to_apply=1
                           SET to_delete=1
                       END
                       DEFAULT
                        END
                    END
                    LPF kit_spell_exclude_func STR_VAR spell RET value END
                    PATCH_IF value BEGIN
                       SET to_add=0
                       SET to_apply=0
                       SET to_remove=0
                       SET to_delete=0
                    END
                    PATCH_IF VARIABLE_IS_SET $kit_spell_ignore("%spell%") BEGIN
                             SET to_add=0
                             SET to_apply=0
                    END
                    PATCH_IF to_remove BEGIN
                       SPRINT $remove_these_spells("%spell%") ""
                    END
                    PATCH_IF to_remove BEGIN
                       SPRINT $delete_these_spells("%spell%") ""
                    END
                    PATCH_IF to_apply BEGIN
                       PATCH_IF collect_apply BEGIN
                        PATCH_IF "%type%" STRING_EQUAL_CASE "AP_" BEGIN
                             SPRINT apply_this_level "%apply_this_level% %entry%"
                        END
                       END
                    END
                    PATCH_IF to_add BEGIN
                       TO_UPPER spell
                       PATCH_IF !VARIABLE_IS_SET $kit_spell_type("%spell%") BEGIN
                          INNER_ACTION BEGIN
                            ACTION_IF FILE_EXISTS_IN_GAME "%spell%.spl" BEGIN
                              COPY_EXISTING "%spell%.spl" override
                                 READ_SHORT 0x1c type
                                 READ_LONG 0x34 level
                                 SET level -= 1
                              BUT_ONLY            
                              OUTER_SET $kit_spell_type("%spell%")=type
                              OUTER_SET $kit_spell_level("%spell%")=level
                              ACTION_IF $kit_spell_type("%spell%")=4 BEGIN
                                 OUTER_SET type=$kit_spell_type("%spell%")
                                 OUTER_SPRINT add_this_level "%add_this_level% ADD_MEMORIZED_SPELL %spell% #0 innate"  // always add innate spells at level 0
                              END
                            END
                          END
                       END
                    END

                END  // end of going through this level
                PATCH_IF "%add_this_level%" STRING_COMPARE_CASE "" BEGIN
                   SPRINT $add_level("%clab_level%") "%add_this_level%"
                END
                PATCH_IF "%apply_this_level%" STRING_COMPARE_CASE "" BEGIN
                   SPRINT $apply_level("%clab_level%") "%apply_this_level%"
                END
             END
     BUT_ONLY
     OUTER_SPRINT remove_string ""
     OUTER_SPRINT delete_string_core ""
     ACTION_PHP_EACH remove_these_spells AS spell=>null BEGIN
          OUTER_SPRINT remove_string "%remove_string% REMOVE_MEMORIZED_SPELL %spell%"
     END
     ACTION_PHP_EACH delete_these_spells AS spell=>null BEGIN
          OUTER_SPRINT delete_string_core "%delete_string_core% %spell%"
     END
     ACTION_IF "%delete_string_core%" STRING_COMPARE "" BEGIN
       OUTER_SPRINT delete_string ~
       PATCH_IF full_delete BEGIN
                        GET_OFFSET_ARRAY offset_array CRE_V10_EFFECTS 
                        PHP_EACH offset_array AS ind=>fx_off BEGIN 
                                    READ_ASCII (fx_off + 0x88) parent 
                                    PATCH_MATCH "%parent%" WITH 
                                    %delete_string_core% BEGIN 
                                         WRITE_SHORT (fx_off+0x8) 999 
                                    END 
                                    DEFAULT 
                                    END 
                        END
                        LPF DELETE_CRE_EFFECT INT_VAR opcode_to_delete=999 END
                     END~
     END ELSE BEGIN
        OUTER_SPRINT delete_string ""
     END
     OUTER_SPRINT add_string ""
     OUTER_FOR (level=1;level<50;level+=1) BEGIN
          ACTION_IF VARIABLE_IS_SET $add_level("%level%") BEGIN
             OUTER_SPRINT add_this_level $add_level("%level%")
             OUTER_SPRINT add_string "%add_string% PATCH_IF level>=%level% BEGIN %add_this_level% END"
          END
     END
     APPEND_OUTER "%workspace%/kit_spell_build.tpa" "%kit_here% BEGIN  
     %remove_string% 
     %add_string% 
     %delete_string% 
END "
     ACTION_IF collect_apply BEGIN
       OUTER_SET made_insertion=0
       OUTER_FOR (level=1;level<50;level+=1) BEGIN
          ACTION_IF VARIABLE_IS_SET $apply_level("%level%") BEGIN
             OUTER_SPRINT apply_this_level $apply_level("%level%")
             ACTION_IF !made_insertion BEGIN
                 OUTER_SET made_insertion=1
                 APPEND_OUTER "%workspace%/kit_collect_apply.txt" ""
                 APPEND_OUTER "%workspace%/kit_collect_apply.txt" "AP_ for kit %kit_here%"
                 APPEND_OUTER "%workspace%/kit_collect_apply.txt" ""
             END
             APPEND_OUTER "%workspace%/kit_collect_apply.txt" "Level %level%: %apply_this_level%"
          END
       END
     END
    END
  END
  APPEND_OUTER "%workspace%/kit_spell_build.tpa" "DEFAULT END"
  APPEND_OUTER "%workspace%/kit_spell_build.tpa" "END"
 END
 INCLUDE "%workspace%/kit_spell_build.tpa"
END

DEFINE_PATCH_FUNCTION kit_spell_exclude_func // things to be ignored entirely (not just skipped for reinstall)
    STR_VAR spell=""
    RET value
BEGIN
    PATCH_MATCH "%spell%" WITH
    "DWAU.*" "DW#AU.*" BEGIN
       SET value=1
    END
    DEFAULT
       SET value=0
    END
END




DEFINE_PATCH_FUNCTION kit_hardcode BEGIN END // this is a placeholder, to be replaced by user-defined version (SCS's lives in lib/kit_hardcode.tpa)


/////////////////////////////////////////////////////
///    Wild Mage squats on the
///    core CLABs mages;
///    give them unique entries
/////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION make_clabs_unique BEGIN
    LAF check_label STR_VAR label="dw#uniqueclab" RET value END
    ACTION_IF !value BEGIN
       LAF make_label STR_VAR label="dw#uniqueclab" END
       LAF find_free_clab INT_VAR to_try=10 STR_VAR prefix=MA RET clab_wildmage=clab END
       LAF read_table_entry INT_VAR lookup_column=1 STR_VAR file=kitlist row=WILDMAGE column=ABILITIES RET value END
       ACTION_IF "%value%" STRING_EQUAL_CASE CLABMA01 BEGIN
            LAF write_table_entry INT_VAR lookup_column=1 STR_VAR file=kitlist row=WILDMAGE column=ABILITIES arguments="%clab_wildmage%" END
            ACTION_IF FILE_EXISTS_IN_GAME "clabma01.2da" BEGIN
                COPY_EXISTING "clabma01.2da" "override/%clab_wildmage%.2da"
            END
       END
    END
END

DEFINE_ACTION_FUNCTION find_free_clab
    INT_VAR to_try=1
    STR_VAR prefix=""
    RET clab
BEGIN
   ACTION_IF to_try<10 BEGIN
      OUTER_SPRINT clab "CLAB%prefix%0%to_try%"
   END ELSE BEGIN
      OUTER_SPRINT clab "CLAB%prefix%%to_try%"
   END
   ACTION_IF FILE_EXISTS_IN_GAME "%clab%.2da" BEGIN
       OUTER_SET to_try +=1 
       LAF find_free_clab INT_VAR to_try STR_VAR prefix RET clab END
   END
END

////////////////////////////////////////////////////////////////////////
/// Find the number of levels applied in a clab (usually 40)
/// We have to do this cleverly, rather than just using COUNT_2DA_COLS,
/// because some CLABs, e.g. FERALAN in unmodded game, are malformed
/////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION find_clab_levels
    RET max_level
BEGIN
    COUNT_2DA_COLS colcount
    SET max_level=0
    FOR (i=0;i<colcount;i+=1) BEGIN
       READ_2DA_ENTRY 0 i i+1 entry_here
       PATCH_IF IS_AN_INT entry_here BEGIN
          SET max_level = entry_here > max_level ? entry_here : max_level
       END
    END
END

////////////////////////////////////////////////////////////////////////
/// This table codes the vanilla BG2 class descriptions, indexed by
/// class ID
/////////////////////////////////////////////////////////////////////////

ACTION_DEFINE_ASSOCIATIVE_ARRAY default_class_descriptions BEGIN
      2=>9556 // fighter
      12=>9557 // ranger
      6=>9558 // paladin
      3=>9559 // cleric
      11=>9560 // druid
      1 =>9563 // mage
      4=>9561 // thief
      5=>9562 // bard
      19=>45866 // sorcerer
      20=>45867 // monk
      7=>9574 // F/M
      8=>9573 // F/C
      9=>9572 // F/T
      10=>9576 // F/M/T
      13=>9575 // M/T
      14 =>9577 // C/M
      15 =>9578 // C/T
      16=>9579 // F/D
      17=>9581 // F/M/C
      18=>9580 // C/R
END
