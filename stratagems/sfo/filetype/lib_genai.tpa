///////////////////////////////////////////////////////////////////////////////////////////
///      Read in item data (the thought is that doing this once and for all may save time)
///////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_MACRO read_in_genai_item_data BEGIN
   ACTION_IF !(VARIABLE_IS_SET genai_items_read) BEGIN
       OUTER_SET genai_items_read=1
       PRINT ~Reading in initial data about weapons~
       SILENT
       ACTION_TRY
         COPY_EXISTING_REGEXP GLOB ~%tutu_var%.*\.itm~ ~override~
             SPRINT filename ~%SOURCE_RES%~
             LPF identify_weapon_patch RET twohanded type proftype enchantment damagetype END
             TO_UPPER filename
             SET $genai_twohanded(~%filename%~)=twohanded
             SET $genai_type(~%filename%~)=type
             SET $genai_proftype(~%filename%~)=proftype
             SET $genai_enchantment(~%filename%~)=enchantment
             SPRINT $genai_damagetype(~%filename%~) ~%damagetype%~
         BUT_ONLY
         WITH DEFAULT
            LAF warning STR_VAR warning="Item file %filename% appears malformed" END
       END
   END
END

//////////////////////////////////////////////////////////////////////////////////////////
//  Full proficiency enforcement
////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_enforce_proficiencies
BEGIN
   LPF CRE_read_kit RET kit=value END
   LPF CRE_read_class RET class=value END
   LPF identify_weapon_preferences STR_VAR filename RET has_ranged skip_me onhandprof offhandprof rangedprof style END
   PATCH_IF !skip_me BEGIN
        LPF allocate_proficiencies INT_VAR onhandprof offhandprof rangedprof style level STR_VAR class kit END
   END
END


//////////////////////////////////////////////////////////////////////////////////////////
///  Proficiency allocation
///
///  Here are the priorities:
///  (1) put one star into onhand, offhand, and ranged (if appropriate, in each case)
///  (2) if fighting two-handed, max out two-weapon
///  (3) if using a ranged weapon, max it out
///  (4) if using an on-hand weapon, max it out
///  (5) if using an off-hand weapon, max it out
///  (6) max out any fighting style other than two-handed
///
///////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION allocate_proficiencies
   INT_VAR onhandprof=0
           offhandprof=0
           rangedprof=0
           style=0
           level=0
   STR_VAR class=""
           kit=""
BEGIN
           SET rangedprofnum=0
           SET offhandprofnum=0
           SET onhandprofnum=0
           SET stylenum=0
           SET onhandprof = onhandprof=rangedprof? 0 :onhandprof         // allow for duplications (e.g. two swords, or battleaxe/throwing axe)
           SET offhandprof = offhandprof=rangedprof? 0 : offhandprof
           SET offhandprof = offhandprof=onhandprof? 0 : offhandprof
           LPF get_num_profs INT_VAR level STR_VAR class RET num_profs=num_profs END
           PATCH_FOR_EACH profname IN onhandprof offhandprof rangedprof style BEGIN
              SET proficiency= ~%profname%~
              LPF get_max_profs INT_VAR proficiency level STR_VAR class kit RET  ~max_%profname%~=max END
           END
           WHILE num_profs>0 BEGIN
              // decrease proficiency counter
              SET num_profs=num_profs - 1
              PATCH_IF (rangedprof>0 & rangedprofnum=0) BEGIN   // get basically proficient in one's weapons
                    SET rangedprofnum=1
              END ELSE
              PATCH_IF (onhandprof>0 & onhandprofnum=0 & max_onhandprof>0) BEGIN
                    SET onhandprofnum=1
              END ELSE
              PATCH_IF (offhandprof>0 & offhandprofnum=0 & max_offhandprof>0) BEGIN
                    SET offhandprofnum=1
              END ELSE
              PATCH_IF (style=STAT_VALUE_PROFICIENCY2WEAPON & stylenum<max_style) BEGIN   // max out two-weapon fighting
                    SET stylenum=stylenum+1
              END ELSE
              PATCH_IF (rangedprof>0 & rangedprofnum<max_rangedprof) BEGIN // max out ranged weapon (if any)
                    SET rangedprofnum=rangedprofnum+1
              END ELSE
              PATCH_IF (onhandprof>0 & onhandprofnum<max_onhandprof) BEGIN // max out onhand weapon
                    SET onhandprofnum=onhandprofnum+1
              END ELSE
              PATCH_IF (offhandprof>0 & offhandprofnum<max_offhandprof) BEGIN // max out offhand weapon (if any)
                    SET offhandprofnum=offhandprofnum+1
              END ELSE
              PATCH_IF (style>0 & stylenum<max_style) BEGIN // max out style
                    SET stylenum=stylenum+1
              END ELSE BEGIN
                 SET num_profs=0 // terminate loop if there are no legal choices
              END
           END
           // actually do the allocations
           LPF CRE_wipe_proficiencies END
           PATCH_FOR_EACH profname IN onhandprof offhandprof rangedprof style BEGIN   SET profcode= ~%profname%~
                 SET value= ~%profname%num~
                 PATCH_IF value>0 BEGIN
                    SET_BG2_PROFICIENCY "%profname%" value
                 END

          /*    SET profcode= ~%profname%~
              PATCH_IF profcode>0 BEGIN
                 SET value= ~%profname%num~
                 PATCH_IF value>0 BEGIN
                    LPF add_entry_inline STR_VAR arguments=~opcode=>233 parameter1=>%value% parameter2=>%profcode% target=>0~ type=effect file_ext=CRE END
                 END
              END
              
           */
           END
END

///////////////////////////////////////////////////////////////////////////////////////////
///      Work out the number of proficiencies a given character has (NB: this gets dual-classed characters wrong, but it's hard to automate them as they can't allocate their points
///      fully freely)
///////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION get_num_profs
          INT_VAR level=0
          STR_VAR class=""
          RET num_profs
BEGIN     
            INNER_ACTION BEGIN
             LAUNCH_ACTION_MACRO read_in_proficiency_progression
            END
            TO_UPPER class
            PATCH_IF VARIABLE_IS_SET $PROFICIENCY_FIRST_LEVEL( ~%class%~) BEGIN
              SET base=$PROFICIENCY_FIRST_LEVEL( ~%class%~)
              SET rate=$PROFICIENCY_RATE( ~%class%~)
            END ELSE BEGIN
             SET base=3
             SET rate=4
            END
            SET num_profs=base+level/rate
END



///////////////////////////////////////////////////////////////////////////////////////////
///      Work out the maximum number of proficiencies in a given proficiency slot
///////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION get_max_profs
          INT_VAR proficiency=0
                  level=0
          STR_VAR class=""
                  kit=""
          RET max
BEGIN
          PATCH_IF proficiency=0 BEGIN
           SET max=0
          END ELSE BEGIN
           INNER_ACTION BEGIN
              LAUNCH_ACTION_MACRO read_in_proficiencies
              LAUNCH_ACTION_MACRO read_in_proficiency_progression
           END
           TO_UPPER kit
           TO_UPPER class
           PATCH_IF VARIABLE_IS_SET $PROFICIENCY(~%proficiency%~ ~%kit%~) BEGIN
              SET max=$PROFICIENCY(~%proficiency%~ ~%kit%~)
           END ELSE BEGIN
              PATCH_IF VARIABLE_IS_SET $PROFICIENCY(~%proficiency%~ ~%class%~) BEGIN
                 SET max=$PROFICIENCY(~%proficiency%~ ~%class%~)
              END ELSE BEGIN
                 SET max=5
              END
           END
           PATCH_IF VARIABLE_IS_SET $PROFICIENCY_FIRST_LEVEL_MAX("%class%") BEGIN
               SET lev1max=$PROFICIENCY_FIRST_LEVEL_MAX("%class%")
           END ELSE BEGIN
               SET lev1max=1 // monsters - so monsters, having lev1max=1 and rate=4, get 2 profs at L5, 3 at L9, 4 at L13, 5 at L17 - which sounds ok
           END
           PATCH_IF VARIABLE_IS_SET $PROFICIENCY_OTHER_LEVEL_MAX("%class%") BEGIN
               SET levothermax=$PROFICIENCY_OTHER_LEVEL_MAX("%class%")
           END ELSE BEGIN
               SET levothermax=5
           END
           PATCH_IF VARIABLE_IS_SET $PROFICIENCY_RATE(~%class%~) BEGIN
             SET rate=$PROFICIENCY_RATE(~%class%~)
           END ELSE BEGIN
             SET rate=4
           END
           SET levmax = lev1max + (level / rate)
           SET levmax = levmax>levothermax? levothermax : levmax
           SET max = max>levmax? levmax: max

         END
END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////    For this item, record its proficiency, whether it's ranged, whether it's two-handed
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////


DEFINE_PATCH_FUNCTION identify_weapon // note that if called on a shield, it returns type 0
        STR_VAR weaponfile=""
        RET twohanded
            type
            proftype
            enchantment
            damagetype
BEGIN
     TO_UPPER weaponfile
     PATCH_IF !VARIABLE_IS_SET $genai_twohanded(~%weaponfile%~) BEGIN
       SET type=0
       SET proftype=0
       SET twohanded=0
       INNER_ACTION BEGIN
        ACTION_MATCH "%weaponfile%" WITH
         // IWDEE random weapons
         rndtre11 BEGIN
            OUTER_SET twohanded=1
            OUTER_SET proftype="-1"
            OUTER_SET enchantment=0
            OUTER_SPRINT damagetype slashing
            OUTER_SET type=0
         END
         rndtre03 rndtre04 rndtre05 rndtre40 rndtre49 rndtre50 rndtre80 BEGIN // random melee weapons
            OUTER_SET twohanded=0
            OUTER_SET proftype="-1"
            OUTER_SET enchantment=0
            OUTER_SPRINT damagetype none
            OUTER_SET type=0
         END
         rndtre41 rndtre42 BEGIN // random bow
            OUTER_SET twohanded=0
            OUTER_SET proftype="-1"
            OUTER_SET enchantment=0
            OUTER_SPRINT damagetype none
            OUTER_SET type=2
         END
         rndtre58 BEGIN  // IWDEE random magic longbow
           OUTER_INNER_PATCH "" BEGIN
            LPF identify_weapon STR_VAR weaponfile=ulbow4a RET twohanded type proftype enchantment damagetype END
           END
         END
         rndtre77 BEGIN  // IWDEE random staff
           OUTER_INNER_PATCH "" BEGIN
            LPF identify_weapon STR_VAR weaponfile=staf01 RET twohanded type proftype enchantment damagetype END
           END
         END
         rndtre87 BEGIN  // IWDEE random crossbow
           OUTER_INNER_PATCH "" BEGIN
            LPF identify_weapon STR_VAR weaponfile=xbow01 RET twohanded type proftype enchantment damagetype END
           END
         END
         rndtre88 BEGIN  // IWDEE random crossbow
           OUTER_INNER_PATCH "" BEGIN
            LPF identify_weapon STR_VAR weaponfile=xbow04 RET twohanded type proftype enchantment damagetype END
           END
         END
         DEFAULT


         ACTION_IF FILE_EXISTS_IN_GAME ~%weaponfile%.itm~ BEGIN
          COPY_EXISTING ~%weaponfile%.itm~ ~override~
              LPF identify_weapon_patch RET twohanded type proftype enchantment damagetype END
          BUT_ONLY
         END ELSE BEGIN
             LAF warning STR_VAR arguments= ~Tried to identify nonexistent weapon %weaponfile%.itm~ END
         END
         END
       END
     END ELSE BEGIN
        SET type=$genai_type(~%weaponfile%~)
        SET proftype=$genai_proftype(~%weaponfile%~)
        SET twohanded=$genai_twohanded(~%weaponfile%~)
        SPRINT damagetype $genai_damagetype(~%weaponfile%~)
        SET enchantment=$genai_enchantment(~%weaponfile%~)
     END
END

DEFINE_PATCH_FUNCTION identify_weapon_patch
        RET twohanded
            type
            proftype
            enchantment
            damagetype
BEGIN
           SPRINT damagetype none
           SET twohanded=0
           SET type=0
           SET proftype=0
           SET enchantment=0
           LPF ITM_read_twohanded RET twohanded=value END
           LPF ITM_read_proficiency_code RET proftype=value END
           SPRINT entry_type ability
           SPRINT file_ext ITM
           LAUNCH_PATCH_MACRO get_offset_array
           PHP_EACH offset_array AS int=>offset_base BEGIN
                  LPF ITM_read_ability_type STR_VAR offset_base RET ab_type=value END
                  PATCH_IF ab_type=1 && type=0 BEGIN
                     LPF ITM_read_enchantment RET enchantment=value END
                     SET type=1
                     LPF ITM_read_damage_type STR_VAR offset_base RET damage_code=value END
                     PATCH_MATCH damage_code WITH
                     1 BEGIN
                        SPRINT damagetype piercing
                     END
                     2 BEGIN
                        SPRINT damagetype crushing
                     END
                     DEFAULT
                        SPRINT damagetype slashing
                     END
                  END
                  PATCH_IF (ab_type=2 || ab_type=4) && type=0 BEGIN
                     SET type=2
                  END
           END
END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////    Go through carried weapons and record the proficiency type of the onhand, offhand and ranged weapon, or
////    zero if none is carried; set skip_me to 1 if a non-proficiency weapon is carried; set style to the preferred
////    weapon style; wipe the offhand slot if it's illegal; get the highest enchantment level and the melee damage type(s)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////


DEFINE_PATCH_FUNCTION identify_weapon_preferences    // goes through all carried weapons. Determines if a melee or a ranged weapon is carried, the proficiencies of carried weapons,
        STR_VAR filename=""
        RET onhandprof
            offhandprof
            rangedprof
            style
            skip_me
            has_ranged
            damagetype
            enchantment
            no_weapon
BEGIN
       SPRINT damagetype unknown
       SET enchantment=0
       PATCH_FOR_EACH var IN has_twohanded onhandprof offhandprof rangedprof has_ranged has_melee BEGIN
          SET ~%var%~ = 0
       END
       SET style=STAT_VALUE_PROFICIENCYSINGLEWEAPON
       SET no_weapon=1
       SET skip_me=0
       SPRINT ~to_delete~ ~~
       // get the item assigned to each slot
       PATCH_FOR_EACH arguments IN weapon1 weapon2 weapon3 weapon4 BEGIN
          LPF CRE_read_item_in_slot STR_VAR arguments RET weaponfile=value END
          PATCH_IF ~%weaponfile%~ STRING_COMPARE_CASE ~~ BEGIN
                PATCH_IF no_weapon BEGIN
                   SET no_weapon=0
                   SET skip_me=1
                END
                LPF identify_weapon STR_VAR weaponfile RET this_twohanded=twohanded type=type proftype=proftype damagetype_here=damagetype ench_here=enchantment END
                PATCH_IF !(proftype=0) BEGIN
                   SET skip_me=0
                END
                PATCH_IF type=1 BEGIN
                   SET onhandprof=proftype
                   SET has_twohanded= this_twohanded=1? 1 : has_twohanded
                   PATCH_IF this_twohanded=1 BEGIN
                      SET style=STAT_VALUE_PROFICIENCY2HANDED
                   END
                   SET has_melee=1
                END
                PATCH_IF type=2 BEGIN
                   SET rangedprof=proftype
                   SET has_ranged=1
                   SET has_twohanded= this_twohanded=1? 1 : has_twohanded
                END
                SET enchantment = enchantment>ench_here? enchantment : ench_here
                PATCH_IF ~%damagetype_here%~ STRING_COMPARE none BEGIN
                  PATCH_IF ~%damagetype%~ STRING_EQUAL unknown BEGIN
                     SPRINT damagetype ~%damagetype_here%~
                  END ELSE
                  PATCH_IF ~%damagetype%~ STRING_COMPARE ~%damagetype_here%~ BEGIN
                     SPRINT damagetype mixed
                  END
                END
          END
       END
       LPF CRE_read_item_in_slot STR_VAR arguments=shield RET weaponfile=value END
       PATCH_IF ~%weaponfile%~ STRING_COMPARE_CASE ~~ BEGIN
                    LPF identify_weapon STR_VAR weaponfile RET type=type proftype=proftype ench_here=enchantment damagetype_here=damagetype END
                    PATCH_IF type=0 BEGIN
                       SET style=STAT_VALUE_PROFICIENCYSWORDANDSHIELD
                    END ELSE BEGIN
                       SET style=STAT_VALUE_PROFICIENCY2WEAPON
                       SET offhandprof=proftype
                    END
                    PATCH_IF has_twohanded=1  BEGIN
                       SPRINT ~to_delete~ ~%weaponfile%~
                    END
                    SET enchantment = enchantment>ench_here? enchantment : ench_here
                    PATCH_IF ~%damagetype_here%~ STRING_COMPARE none BEGIN
                        PATCH_IF ~%damagetype%~ STRING_EQUAL unknown BEGIN
                           SPRINT damagetype ~%damagetype_here%~
                        END ELSE
                        PATCH_IF ~%damagetype%~ STRING_COMPARE ~%damagetype_here%~ BEGIN
                                    SPRINT damagetype mixed
                        END
                    END
       END
       PATCH_FOR_EACH arguments IN quiver1 quiver2 quiver3 quiver4 BEGIN
              LPF CRE_read_item_in_slot STR_VAR arguments RET weaponfile=value END
              PATCH_IF ~%weaponfile%~ STRING_COMPARE_CASE ~~ BEGIN
                 LPF identify_ammo STR_VAR weaponfile RET ench_here=enchantment END
                 SET enchantment = enchantment>ench_here? enchantment : ench_here
              END
       END

       PATCH_IF (~%to_delete%~ STRING_COMPARE_CASE ~~) BEGIN
          LPF CRE_remove_items STR_VAR arguments= ~%to_delete%~ END
          LPF log_resource_name STR_VAR filename arguments=illegal_offhand END
       END
       PATCH_IF (has_ranged && !has_melee) BEGIN
          LPF warning STR_VAR warning="%filename% has ranged but not melee weapon" END
       END

END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////    Get the enchantment level for ammo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION identify_ammo
       STR_VAR weaponfile=""
       RET enchantment
BEGIN
   INNER_ACTION BEGIN
     ACTION_IF FILE_EXISTS_IN_GAME ~%weaponfile%.itm~ BEGIN
      COPY_EXISTING ~%weaponfile%.itm~ ~override~
           LPF ITM_read_enchantment RET enchantment=value END
      BUT_ONLY
     END ELSE BEGIN
             LAF warning STR_VAR warning=~Tried to identify nonexistent ammo %weaponfile%.itm~ END
     END
   END
END


