DEFINE_ACTION_FUNCTION flip_area
   STR_VAR area=""
           wed=""
           tis_ee_dir=""
           tis_vanilla=""
BEGIN
   COPY_EXISTING "%wed%.wed" override
        // get the width in pixels of the area
        READ_LONG 0x10 overlay_off
        READ_SHORT overlay_off num_tiles
        SET width_total=num_tiles*0x40
        // get vertex, polygon offsets
        READ_LONG 0x14 sec_header_off
        READ_LONG (0x8+sec_header_off) initial_vertex_offset
        READ_LONG sec_header_off wall_polygon_number
        READ_LONG (0x4 + sec_header_off) initial_polygon_offset
        // go through polygons
        FOR (n=0;n<wall_polygon_number;n+=1) BEGIN
           SET polygon_offset = initial_polygon_offset + 0x12 * n
           READ_LONG polygon_offset initial_vertex_index
           READ_LONG polygon_offset+4 vertex_number
           // vertex inversion
           LPF invert_vertex_sequence_order INT_VAR initial_vertex_offset initial_vertex_index vertex_number width_total END
           // bounding box inversion
           LPF flip_bounding_box INT_VAR offset=polygon_offset+0xa width_total END
        END
   BUT_ONLY





END

//////////////////////////////////////////
/// Take a vertex and flip it L/R
//////////////////////////////////////////

DEFINE_PATCH_FUNCTION flip_vertex
  INT_VAR width_total=0
          offset=0
BEGIN
  WRITE_SHORT offset (width_total - SHORT_AT offset)
END

//////////////////////////////////////////
/// Take a bounding box and flip it L/R
//////////////////////////////////////////

DEFINE_PATCH_FUNCTION flip_bounding_box
  INT_VAR width_total=0
          offset=0
BEGIN
  READ_SHORT offset left
  READ_SHORT (offset+2) right
  WRITE_SHORT offset (width_total - right)
  WRITE_SHORT (offset+2) (width_total - left)
END

//////////////////////////////////////////
/// Take the sequence of vertices defining a polygon.
/// Flip each element, then reverse the order, from
/// 0 1 2 3 ... N to 0 N ... 3 2 1
//////////////////////////////////////////

DEFINE_PATCH_FUNCTION invert_vertex_sequence_order
  INT_VAR initial_vertex_offset=0
          initial_vertex_index=0
          vertex_number=0
          width_total=0
BEGIN
  // flip individual elements
  FOR (n=0;n<vertex_number;n+=1) BEGIN
     LPF flip_vertex INT_VAR width_total offset=initial_vertex_offset + 4*(initial_vertex_index + n) END
  END
  // do the inversion
  SPRINT data_new ""
  FOR (n=1;n<vertex_number;n+=1) BEGIN
     READ_LONG (initial_vertex_offset + 4*(initial_vertex_index + n)) this_vertex
     SPRINT data_new "%this_vertex%%data_new%"
  END
  WRITE_ASCIIE initial_vertex_offset + 4*(initial_vertex_index + 1) "%data_new%"
END