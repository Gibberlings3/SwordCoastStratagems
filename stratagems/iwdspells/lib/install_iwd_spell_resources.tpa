DEFINE_ACTION_FUNCTION install_iwd_spell_resources
            INT_VAR overwrite_always=0
                    make_scrolls=1
            STR_VAR scroll_shadow_list=""
                    smtables_list="" 
                    spell_list="" 
                    proj_list="" 
                    smtables_list=""
                    scroll_price_list=""
                    tra="" 
                    lookup=""
                    location=""
                    locbase="" 
                    locabs="" 
                    biff="" 
                    bam_copy="" 
                    green_bams="" 
                    afterwards="" 
                    afterwards_tra=""
BEGIN


    ACTION_IF "%scroll_shadow_list%" STRING_EQUAL "" BEGIN
       OUTER_SET macro_spellcode_skip_scrolls=1
    END
    OUTER_SET macro_spellcodes_read=0
    LAM read_in_spellcodes


    // initialise scroll finder
    OUTER_SPRINT scroll_slot "00"

    ACTION_IF do_not_biff BEGIN
       OUTER_SPRINT install_loc override
    END ELSE BEGIN
       OUTER_SPRINT install_loc "%workspace%/%biff%"
       MKDIR "%install_loc%"
    END
    OUTER_SPRINT baf_loc "%workspace%/iwdspells_baf"
    MKDIR "%baf_loc%"


    
    // install animations
    ACTION_IF !GAME_IS iwdee BEGIN
    LAF check_label STR_VAR label="dw#iwd_anim" RET value END
    ACTION_IF !value BEGIN
       LAF make_label STR_VAR label="dw#iwd_anim" END
       ACTION_IF do_not_biff BEGIN
          ACTION_BASH_FOR "%resource_loc%/anim/bam" "*.*" BEGIN
             COPY "%BASH_FOR_FILESPEC%" override
          END
          ACTION_BASH_FOR "%resource_loc%/anim/wav" "*.*" BEGIN
             COPY "%BASH_FOR_FILESPEC%" override
          END
       END ELSE BEGIN
          MAKE_BIFF "dw#idani" BEGIN "%resource_loc%/anim/bam" ".*\.*" END
          MAKE_BIFF "dw#idawv" BEGIN "%resource_loc%/anim/wav" ".*\.*" END
       END
    END
    
    // install creature animations (right now, only beetles)
    
    ACTION_BASH_FOR "%resource_loc%/beetle/bam" ".*\.bam" BEGIN
       ACTION_IF !FILE_EXISTS_IN_GAME "%BASH_FOR_FILE%" BEGIN
          COPY "%BASH_FOR_FILESPEC%" override
       END
    END

    ACTION_BASH_FOR "%resource_loc%/beetle/wav" ".*\.wav" BEGIN
       ACTION_IF !FILE_EXISTS_IN_GAME "%BASH_FOR_FILE%" BEGIN
          COPY "%BASH_FOR_FILESPEC%" override
       END
    END
    END
    // read in files we're allowed to overwrite (NOT redundant with later such block - this one is individual files!)
    
    LAF read_in_list STR_VAR file="resource_overwrite.2da" location="%iwdspells_data%" RET list END
    OUTER_WHILE "%list%" STRING_COMPARE_CASE "" BEGIN
       LAF return_first_entry STR_VAR list RET entry list END
       ACTION_TO_UPPER entry
       OUTER_SET $overwrite_me("%entry%")=1
    END

    PRINT "Resolving animation reallocations"

    ACTION_IF enhanced_edition BEGIN
    // get a list of which IWD animations are missing in BG(2)EE
     ACTION_IF !GAME_IS iwdee BEGIN
     ACTION_IF !(FILE_EXISTS "%data_loc%/missing_animations.2da") BEGIN
       LAF run STR_VAR file=audit_animations location="%iwdspells_lib%" END
     END
     ACTION_IF FILE_EXISTS "%data_loc%/missing_animations.2da" BEGIN // theoretically it might still not exist because every animation has been added!
          COPY "%data_loc%/missing_animations.2da" "%workspace%"
             READ_2DA_ENTRIES_NOW missing_anim_array 1
             FOR (i=0;i<missing_anim_array;i+=1) BEGIN
                READ_2DA_ENTRY_FORMER missing_anim_array i 0 entry
                entry +=1 // to force number
                SPRINT $anim_missing("%entry%") ""
             END
          BUT_ONLY
     END
    END

    // load in and resolve any animation reallocations
    
    LAF read_in_assoc_array STR_VAR file=anim_maps.2da locbase="%iwdspells_data%" RET list END
    LAF return_first_pair STR_VAR list RET list END // discard first row
    OUTER_WHILE "%list%" STRING_COMPARE "" BEGIN
          LAF return_first_pair STR_VAR list RET key value list END
          OUTER_SET key_number=IDS_OF_SYMBOL (animate "%key%")
          OUTER_SET value_number=IDS_OF_SYMBOL (animate "%value%")
          OUTER_SET $anim_map("%key_number%") = value_number
  //        PRINT "Animation map %key_number% => %value_number%, corresponding to %key%=>%value"
    END
    END

    PRINT "Resolving TRA entries"

    // load in and resolve the tra entries

    ACTION_IF FILE_EXISTS "%resource_loc%/tra/%EE_LANGUAGE%/%tra%" BEGIN
       OUTER_SPRINT tra_file "%resource_loc%/tra/%EE_LANGUAGE%/%tra%"
    END ELSE BEGIN
       OUTER_SPRINT tra_file "%resource_loc%/tra/en_us/%tra%"
    END

    WITH_TRA "%tra_file%" BEGIN
       COPY_EXISTING "%resource_loc%/%lookup%" "%workspace%"
            READ_2DA_ENTRIES_NOW tra_entries 2
            FOR (i=0;i<tra_entries;i+=1) BEGIN
                 READ_2DA_ENTRY_FORMER tra_entries i 0 key
                 READ_2DA_ENTRY_FORMER tra_entries i 1 value
                 SET $strref_map("%key%")=RESOLVE_STR_REF ((AT "%value%"))
            END
       BUT_ONLY
    END

    // sort out monster-summoning entries
    ACTION_IF enhanced_edition BEGIN
    LAF read_in_assoc_array STR_VAR file="%smtables_list%" locabs="%resource_loc%" RET list END
    COPY_EXISTING "smtables.2da" override
       COUNT_2DA_ROWS 2 rowcount
       WHILE "%list%" STRING_COMPARE "" BEGIN
           LPF return_first_pair STR_VAR list RET id_old=key 2dafile=value list END
           SET id_new=rowcount - 1
           INSERT_2DA_ROW rowcount 2 "%id_new%_summons %2dafile%"
           SET $smtables_map("%id_old%")="%id_new%"
           SET rowcount +=1
       END
    BUT_ONLY
    END
    
    // load in scroll prices
    
    LAF read_in_assoc_array STR_VAR file="%scroll_price_list%" locabs="%resource_loc%" RET_ARRAY scroll_prices=array END

    PRINT "Resolving projectile entries"

    // load in and resolve the projectile entries
    
    OUTER_SET lowest_to_try=300

    ACTION_IF FILE_EXISTS "%resource_loc%/%proj_list%" BEGIN
     LAF read_in_assoc_array STR_VAR file="%proj_list%" locabs="%resource_loc%" RET list END
     OUTER_WHILE "%list%" STRING_COMPARE "" BEGIN
       LAF return_first_pair STR_VAR list RET resref=key pronum=value list END
       LAF add_projectile_ids_entry INT_VAR lowest_to_try STR_VAR resref RET number END
       OUTER_SET lowest_to_try=number
       OUTER_SET $proj_map("%pronum%")=number
       OUTER_SET number +=1
     END
    END
    // get the list of spells to be overwritten (NOT redundant with earlier overwrite block)
    
    ACTION_IF demivrgvs BEGIN
       LAF read_in_list STR_VAR file=overwrite_sr.2da locbase="%iwdspells_data%" RET list END
    END ELSE BEGIN
       LAF read_in_list STR_VAR file=overwrite.2da locbase="%iwdspells_data%" RET list END    
    END
    OUTER_WHILE "%list%" STRING_COMPARE "" BEGIN
       LAF return_first_entry STR_VAR list RET entry list END
       ACTION_TO_UPPER entry
       OUTER_SPRINT $overwrite("%entry%") ""
    END

    // actually install

    LAF read_in_assoc_array STR_VAR file="%spell_list%" locabs="%resource_loc%" RET list END
    OUTER_WHILE "%list%" STRING_COMPARE "" BEGIN
       LAF return_first_pair STR_VAR list RET spellname=key old_spell_resref=value list END
       // unless we're overwriting, check if it's there
       ACTION_TO_UPPER spellname
       PRINT "%spellname%..."
       ACTION_IF (VARIABLE_IS_SET $overwrite("%spellname%") || overwrite_always) BEGIN
        OUTER_SET overwrite=1
        OUTER_SET proceed=1
        PRINT "...overwriting!"
       END ELSE BEGIN
        OUTER_SET overwrite=0
        OUTER_SET check_if_present=IDS_OF_SYMBOL (spell "%spellname%")
        ACTION_IF check_if_present<0 BEGIN
          OUTER_SET proceed=1 // if it's not there at all, we'll add the spell
        END ELSE BEGIN // if the spell is listed in IDS, check if it's really there or just cruft
          LAF get_spellcode STR_VAR input="%spellname%" RET resref_to_check=value END
          ACTION_IF FILE_EXISTS_IN_GAME "%resref_to_check%.spl" BEGIN
             OUTER_SET proceed=0
             OUTER_SPRINT new_spell_resref "%resref_to_check%" // for scrolls
          END ELSE BEGIN
             OUTER_SET proceed=1
          END
        END
       END
        // on SR installs, we're hardcoded to skip the whole MONSTER_SUMMONING/CAUSE_WOUNDS bits
        ACTION_IF demivrgvs BEGIN
           ACTION_MATCH "%spellname%" WITH
           "WIZARD_MONSTER_SUMMONING.*" 
           "CLERIC_CAUSE_SERIOUS_WOUNDS_IWD"
           "CLERIC_CAUSE_CRITICAL_WOUNDS_IWD"
           BEGIN
              OUTER_SET proceed=0
              PRINT "Cancelling overwrite, SR version present"
              OUTER_SPRINT new_spell_resref "%resref_to_check%" // for scrolls
           END
           DEFAULT
           END
        END
       ACTION_IF proceed BEGIN // only add the spell if it (or a variant) isn't already present
           //note that spell is installed
           OUTER_SPRINT $IWD_spell_installed("%spellname%") ""
           // get ids ref
            LAF add_spell_to_ids STR_VAR idsname="%spellname%" filename="%old_spell_resref%" file_loc="%resource_loc%/%spellname%" RET new_spell_resref=newname END
            OUTER_SPRINT "%spellname%" "%new_spell_resref%"
            ACTION_BASH_FOR "%resource_loc%/%spellname%" ".*\.*" BEGIN
               OUTER_PATCH_SAVE new_resref "%BASH_FOR_RES%" BEGIN
                  REPLACE_TEXTUALLY "%old_spell_resref%" "%new_spell_resref%"
               END
               // do a namespace-conflict sanity check
               OUTER_SET sanity_check_fail=0
               OUTER_SPRINT new_filename "%new_resref%.%BASH_FOR_EXT%"
               ACTION_TO_UPPER new_filename
               ACTION_IF FILE_EXISTS_IN_GAME "%new_filename%" && !(VARIABLE_IS_SET $resource_copied_over("%new_resref%" "%BASH_FOR_EXT%")) BEGIN
                      // looks like namespace conflict...
                      OUTER_SET sanity_check_fail=1
                      // ...but we don't care if we're overwriting and it's the spell's actual name, or a BAM file
                      ACTION_IF overwrite && !("%new_resref%" STRING_MATCHES_REGEXP "%new_spell_resref%.*") BEGIN
                          OUTER_SET sanity_check_fail=0
                      END
                      ACTION_IF sanity_check_fail BEGIN
                        // otherwise, see if files are actually different
                        COPY_EXISTING "%new_filename%" "%workspace%"
                            READ_ASCII 0x0 checksum_1 (BUFFER_LENGTH)
                        BUT_ONLY
                        COPY "%resource_loc%/%spellname%/%BASH_FOR_FILE%" "%workspace%"
                            READ_ASCII 0x0 checksum_2 (BUFFER_LENGTH)
                        BUT_ONLY
                        ACTION_IF "%checksum_1%" STRING_EQUAL "%checksum_2%" BEGIN
                           OUTER_SET sanity_check_fail=0
                           OUTER_SET $resource_copied_over("%new_resref%" "%BASH_FOR_EXT%")=1
                        END
                      END
                      // look to see if this file is marked to overwrite
                      ACTION_IF VARIABLE_IS_SET $overwrite_me("%new_filename%") BEGIN
                         OUTER_SET sanity_check_fail=0
                      END
                      // otherwise
                      ACTION_IF sanity_check_fail BEGIN
                         ACTION_IF !VARIABLE_IS_SET $namespace_conflict("%new_filename%") BEGIN
                            LAF warning STR_VAR warning="Not installing resource %new_filename% for %spellname%: namespace conflict" END
                            OUTER_SET $namespace_conflict("%new_filename%")=1
                         END
                      END

               END
               ACTION_IF !sanity_check_fail BEGIN
                  ACTION_IF !VARIABLE_IS_SET $resource_copied_over("%new_resref%" "%BASH_FOR_EXT%") BEGIN
                    OUTER_SET $resource_copied_over("%new_resref%" "%BASH_FOR_EXT%")=1
                    ACTION_IF FILE_EXISTS "override/%new_resref%.%BASH_FOR_EXT%" &!do_not_biff BEGIN // if it's already in the override, delete it
                       DELETE "override/%new_resref%.%BASH_FOR_EXT%"
                    END
                    ACTION_IF "%BASH_FOR_EXT%" STRING_EQUAL_CASE "BAF" BEGIN
                       OUTER_SPRINT new_loc "%baf_loc%"
                    END ELSE BEGIN
                       OUTER_SPRINT new_loc "%install_loc%"
                    END
                    COPY "%resource_loc%/%spellname%/%BASH_FOR_FILE%" "%new_loc%/%new_resref%.%BASH_FOR_EXT%"
                       REPLACE_TEXTUALLY "%old_spell_resref%" "%new_spell_resref%"
                       PATCH_MATCH "%BASH_FOR_EXT%" WITH
                       2da BEGIN
                          LPF apply_to_strrefs_2da STR_VAR arguments=strref_updater END
                       END
                       DEFAULT
                          LPF apply_to_strrefs STR_VAR arguments=strref_updater filename="%BASH_FOR_RES%" file_ext="%BASH_FOR_EXT%" END
                       END
                   // end of copy
                    // sort out projectiles and summons
                    ACTION_MATCH "%BASH_FOR_EXT%" WITH
                          spl itm BEGIN
                              MAKE_PATCH
                                    patch_ability_inline=>"projectile=>~projectile in adjust_projectile_number~"
                                    patch_effect_inline=>"match=>opcode=331 parameter2=>~parameter2 in summons_swap~"
                                    delete_effect=>"opcode=324 and parameter2=63" // remove Evasion
                              END
                              ACTION_IF !("%new_resref%.%BASH_FOR_EXT%" STRING_MATCHES_REGEXP "SPWI[1-9][0-9][0-9]\.spl") BEGIN
                                    OUTER_SPRINT $patch_data("enforce_school") null
                              END
                              LAF edit_whatever STR_VAR file="%new_resref%.%BASH_FOR_EXT%" locabs="%install_loc%" edits=patch_data END
                          END
                          pro BEGIN
                              COPY "%install_loc%/%new_resref%.%BASH_FOR_EXT%" "%workspace%"
                                    PATCH_IF BUFFER_LENGTH>0x200 BEGIN
                                       SET extended=1
                                    END ELSE BEGIN
                                       SET extended=0
                                    END
                              BUT_ONLY
                              ACTION_IF extended BEGIN
                                 MAKE_PATCH
                                    explosion_pro=>"explosion_pro in adjust_projectile_number"
                                    secondary_pro=>"secondary_pro in adjust_projectile_number"
                                 END
                                 LAF edit_pro STR_VAR pro="%new_resref%" locabs="%install_loc%" edits=patch_data END

                              END
                          END
                          cre BEGIN
                             MAKE_PATCH
                                animation_code=>"animation_code in animation_swap"
                             END
                             LAF edit_creature STR_VAR creature="%new_resref%" locabs="%install_loc%" edits=patch_data END
                          END
                      DEFAULT END
                 END // end of the 'have we copied this over already?' loop
               END // end of the sanity-check-fail loop

            END // end of the resource ACTION_BASH_FOR
       END    // end of proceed? loop
       // scroll
       ACTION_IF (!overwrite && make_scrolls && INDEX ("\(SPWI\|SPPR\)[1-9][0-9][0-9]$" "%new_spell_resref%")>=0 && !VARIABLE_IS_SET "%spellname%_SCROLL" ) BEGIN
                 ACTION_IF is_iwd BEGIN
                    OUTER_SPRINT name_func dw_scroll_name
                 END ELSE BEGIN
                    OUTER_SPRINT name_func cd_scroll_name
                 END
                 ACTION_IF VARIABLE_IS_SET $scroll_prices("%spellname%") BEGIN
                    OUTER_SET price=$scroll_prices("%spellname%")
                 END ELSE BEGIN
                    OUTER_SET price="-1"
                 END
                 LAF make_scroll_of_spell INT_VAR price STR_VAR spell_loc="%install_loc%" resref="%new_spell_resref%" name_func RET scrollname END
                 OUTER_SPRINT "%spellname%_SCROLL" "%scrollname%"
        END
        ACTION_IF overwrite BEGIN
               OUTER_SPRINT scrollname "%spellname%_SCROLL"
               OUTER_SPRINT scroll EVAL "%%scrollname%%"
               ACTION_IF FILE_EXISTS_IN_GAME "%scroll%.itm" BEGIN
                    COPY "%install_loc%/%new_spell_resref%.spl" "%workspace%"
                        READ_LONG 0x8 name_strref
                        READ_LONG 0x50 desc_strref
                    BUT_ONLY
                    COPY_EXISTING "%scroll%.itm" override
                         WRITE_LONG 0xc name_strref
                         WRITE_LONG 0x54 desc_strref
                    BUT_ONLY
               END
        END

    END // end of outer loop

    // compile any scripts (do this last, so new entries have a chance to get into spell.ids)

    CLEAR_IDS_MAP
    ACTION_BASH_FOR "%baf_loc%" ".*\.baf" BEGIN
       COPY "%BASH_FOR_FILESPEC%" "%install_loc%/%BASH_FOR_RES%.BCS"
         COMPILE_BAF_TO_BCS
    END

    // if relevant, install scrolls
    
    ACTION_IF "%scroll_shadow_list%" STRING_COMPARE "" BEGIN
       LAF install_scrolls STR_VAR scroll_shadow_list END
    END

    // greenify
    
    ACTION_IF "%bam_copy%" STRING_COMPARE_CASE "" BEGIN
             LAF include STR_VAR file=install_iwd_spell_bams.tpa location="%iwdspells_lib%" END
             LAF install_iwd_spell_bams STR_VAR file="%bam_copy%" install_loc END
    END
    
    ACTION_IF "%green_bams%" STRING_COMPARE_CASE "" BEGIN
        LAF include STR_VAR file=make_bams_green.tpa location="%iwdspells_lib%" END
        LAF make_bams_green STR_VAR file="%green_bams%" install_loc END
    END
    
    // icons (will only happen once)
    
    ACTION_IF !GAME_IS iwdee BEGIN
    LAF install_iwd_icons END
    END

    // make BIFF

    ACTION_IF !do_not_biff BEGIN
       MAKE_BIFF "%biff%" BEGIN "%install_loc%" ".*\.*" END
    END

    // sort out remaps (needs to happen AFTER biff so files are in-game - this is the price of having separate divine, arcane components)
    ACTION_IF !GAME_IS iwdee BEGIN
    LAF process_table STR_VAR function=remap_spell_resrefs_helper table="spells_used.2da" locabs="%resource_loc%" END

    ACTION_IF FILE_EXISTS_IN_GAME "7eyes.2da" BEGIN
       COPY_EXISTING "7eyes.2da" override
          PATCH_IF VARIABLE_IS_SET CLERIC_DESTRUCTION BEGIN
             SPRINT replace "%CLERIC_DESTRUCTION%"
             TO_UPPER replace
             REPLACE_TEXTUALLY SPPR734 "%replace%"
          END
          PATCH_IF VARIABLE_IS_SET CLERIC_SYMBOL_HOPELESSNESS BEGIN
             SPRINT replace "%CLERIC_SYMBOL_HOPELESSNESS%"
             TO_UPPER replace
             REPLACE_TEXTUALLY SPPR716 "%replace%"
          END
    END
    END

    // manual tasks
    
    ACTION_IF "%afterwards%" STRING_COMPARE_CASE "" BEGIN
      ACTION_IF "%afterwards_tra%" STRING_COMPARE_CASE "" BEGIN
             ACTION_IF FILE_EXISTS "%scsroot%/%iwdspells_trabase%/%LANGUAGE%/%afterwards_tra%" BEGIN
               OUTER_SPRINT tra "%scsroot%/%iwdspells_trabase%/%LANGUAGE%/%afterwards_tra%"
             END ELSE BEGIN
               OUTER_SPRINT tra "%scsroot%/%iwdspells_trabase%/english/%afterwards_tra%"
             END
      END ELSE BEGIN
           OUTER_SPRINT tra ""
      END
       LAF include STR_VAR file="%afterwards%.tpa" location="%iwdspells_lib%" END
       LAF "%afterwards%" STR_VAR tra END
    END

    // tidy up

    LAF sort_ids STR_VAR ids=spell END
END

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION strref_updater 
   INT_VAR strref=0
   STR_VAR offset=0
   RET strref_new
BEGIN
   SET strref_new=strref
   PATCH_IF offset=0 BEGIN
      SET old=strref
   END ELSE BEGIN
      READ_LONG offset old
   END
   PATCH_IF VARIABLE_IS_SET $strref_map("%old%") BEGIN
      SET strref_new=$strref_map("%old%")
      PATCH_IF offset>0 BEGIN
          WRITE_LONG offset strref_new
      END

   END
END

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION adjust_projectile_number
    STR_VAR arguments=0 RET value
BEGIN
   SET arguments -=1
   PATCH_IF VARIABLE_IS_SET $proj_map("%arguments%") BEGIN
      SET value = $proj_map("%arguments%") + 1
   END ELSE BEGIN
      SET value = arguments + 1
   END
END

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION summons_swap
   STR_VAR arguments=0 RET value
BEGIN
 PATCH_IF enhanced_edition BEGIN
   PATCH_IF VARIABLE_IS_SET $smtables_map("%arguments%") BEGIN
      SPRINT value $smtables_map("%arguments%")
   END ELSE BEGIN
      SPRINT value "%arguments%"
      LPF warning STR_VAR warning="failed to recognise a swap for summons code %arguments%" END
   END
 END
END

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION animation_swap
   STR_VAR arguments=0 RET value
BEGIN
   PATCH_IF VARIABLE_IS_SET $anim_map("%arguments%") BEGIN
      SET value=$anim_map("%arguments%")
   END ELSE BEGIN
      arguments +=1 // to force number
      arguments -=1
      PATCH_IF VARIABLE_IS_SET $anim_missing("%arguments%") BEGIN
         LOOKUP_IDS_SYMBOL_OF_INT anim_name animate arguments
         SPRINT warning_string "Warning: animation %anim_name% does not exist in game. Reverting to MINOTAUR, which may look weird"
         LPF warning STR_VAR warning="%warning_string%" END
         SET value=0xE070
      END ELSE BEGIN
         SET value=arguments
      END
   END
END

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION add_projectile_ids_entry INT_VAR lowest_to_try=300 STR_VAR resref="" RET number
BEGIN
    OUTER_PATCH "" BEGIN
        LOOKUP_IDS_SYMBOL_OF_INT check projectl lowest_to_try
    END
    ACTION_IF IS_AN_INT check BEGIN // ie if it's -1, i.e. that number isn't used
       APPEND "projectl.ids" "%lowest_to_try% %resref%"
       OUTER_SET number=lowest_to_try
    END ELSE BEGIN
       OUTER_SET lowest_to_try +=1
       LAF add_projectile_ids_entry INT_VAR lowest_to_try STR_VAR resref RET number END
    END
END

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION install_scrolls
   STR_VAR scroll_shadow_list=""
BEGIN
   // read in the shadow list
   COPY "%scsroot%/%iwdspells_data%/%scroll_shadow_list%" "%workspace%"
       COUNT_2DA_ROWS 2 rowcount
       FOR (i=1;i<rowcount;i+=1) BEGIN
        READ_2DA_ENTRY i 0 2 spell
        READ_2DA_ENTRY i 1 2 shadow
        PATCH_MATCH "%shadow%" WITH
        "*" BEGIN END
        DEFAULT
         PATCH_IF INDEX ("WIZARD_" "%spell%")=0 BEGIN
             SPRINT spellname "%spell%"
          END ELSE BEGIN
             SPRINT spellname "WIZARD_%spell%"
         END
         PATCH_IF VARIABLE_IS_SET $IWD_spell_installed("%spellname%") BEGIN
          SPRINT key EVAL "%%spellname%_SCROLL%"
          PATCH_IF INDEX ("WIZARD_" "%shadow%")=0 BEGIN
             SPRINT value EVAL "%%shadow%_SCROLL%"
          END ELSE BEGIN
             SPRINT value EVAL "%WIZARD_%shadow%_SCROLL%"
          END
          INNER_ACTION BEGIN
           ACTION_IF FILE_EXISTS_IN_GAME "%key%.itm" BEGIN
             ACTION_IF FILE_EXISTS_IN_GAME "%value%.itm" BEGIN
                   OUTER_SPRINT $shadow_map("%key%") "%value%"
             END ELSE BEGIN
                   LAF warning STR_VAR warning="Missing shadow spell for spell %spell% (tried to set it to %value%)" END
             END
           END ELSE BEGIN
              LAF warning STR_VAR warning="No scroll exists for spell %spell%" END
           END
          END
         END ELSE BEGIN // end of does-spell-exist clause
         END
        END  // end of PATCH_MATCH
       END // end of FOR loop
   BUT_ONLY
   // edit shops

   COPY_EXISTING_REGEXP GLOB ".*\.sto" override
           SPRINT entry_type item
           SPRINT file_ext sto
           LPM get_offset_array
           PHP_EACH offset_array AS key=>offset_base BEGIN
                    LPF STO_read_item_resource STR_VAR offset_base RET item_resref=value END
                    LPF STO_read_item_num_in_stock STR_VAR offset_base RET number=value END
                    TO_UPPER item_resref
                    SET $stock("%item_resref%")=number
           END

           PHP_EACH shadow_map AS key=>value BEGIN
                 PATCH_IF INDEX_BUFFER ("%value%")>=0 BEGIN
                      TO_UPPER value
                      SET number_in_stock=$stock("%value%")
                      ADD_STORE_ITEM "%key%" AFTER "%value%" #1 #0 #0 "IDENTIFIED" (number_in_stock)
                 END
           END
   BUT_ONLY
END

////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION find_scroll_slot
    STR_VAR scroll_slot="00"
    RET scroll_slot
BEGIN
   ACTION_IF (FILE_EXISTS_IN_GAME "SCRL%scroll_slot%.itm" || FILE_EXISTS "%install_loc%/SCRL%scroll_slot%.itm") BEGIN
        LAF alphanumeric_advance STR_VAR arguments="%scroll_slot%" RET scroll_slot=value END
        LAF find_scroll_slot STR_VAR scroll_slot RET scroll_slot END
   END
END

DEFINE_ACTION_FUNCTION dw_scroll_name
   STR_VAR arguments=""
   RET value
BEGIN
   LAF find_scroll_slot RET scroll_slot END
   OUTER_SPRINT value "SCRL%scroll_slot%"
END


////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION remap_spell_resrefs_helper
    STR_VAR resref=""
            spellname=""
            parent=""
            parent_ext=""
BEGIN
   ACTION_TO_UPPER parent
   ACTION_IF "%parent_ext%" STRING_EQUAL_CASE SPL BEGIN
      ACTION_IF VARIABLE_IS_SET "%parent%" BEGIN
         OUTER_SPRINT parent EVAL "%%parent%%"
      END
   END
   ACTION_IF FILE_EXISTS_IN_GAME "%parent%.%parent_ext%" BEGIN
      OUTER_INNER_PATCH_SAVE placeholder "%resref%" BEGIN
         WRITE_ASCII 0x0 "##"
      END
      ACTION_TO_UPPER spellname
      ACTION_IF VARIABLE_IS_SET "%spellname%" BEGIN
          OUTER_SPRINT resref_new EVAL "%%spellname%%"
          PRINT "%spellname% exists; swapping %placeholder% and %resref% for %resref_new% in %parent%"
          LAF swap_text STR_VAR files="%parent%.%parent_ext%" swaps="%placeholder%=>%resref_new% %resref%=>%resref_new%" END
      END ELSE BEGIN
          PRINT "%spellname% does not exist; swapping %resref% for %placeholder% in %parent%"
          LAF swap_text STR_VAR files="%parent%.%parent_ext%" swaps="%resref%=>%placeholder%" END
      END
   END
END

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
///         Name scrolls CamDawg style
///
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////



DEFINE_ACTION_FUNCTION cd_scroll_name
    STR_VAR arguments=""
    RET value
BEGIN
    OUTER_INNER_PATCH_SAVE value "%arguments%" BEGIN
       REPLACE_TEXTUALLY SPWI CDIA
       REPLACE_TEXTUALLY SPPR CDID
    END

END

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
///        Install icons
///
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION install_iwd_icons BEGIN

   LAF check_label STR_VAR label="dw#iwd_icons" RET value END
   ACTION_IF !value BEGIN
      LAF make_label STR_VAR label="dw#iwd_icons" END
      COPY "%resource_loc%/icon/states.bam" override
      COPY "%resource_loc%/icon/states2.bam" override
   END
   COPY "%resource_loc%/icon/statdesc.2da" "%workspace%"
        COUNT_2DA_ROWS 3 rowcount
        FOR (i=0;i<rowcount;i+=1) BEGIN
           READ_2DA_ENTRY i 0 3 number
           PATCH_IF (number >=164 && number <=187) BEGIN
              READ_2DA_ENTRY i 1 3 strref_iwd
              SET $icon_strref("%number%") = $strref_map("%strref_iwd%")
           END
        END
   BUT_ONLY
   COPY_EXISTING "statdesc.2da" override
        COUNT_2DA_ROWS 3 rowcount
        FOR (i=0;i<rowcount;i+=1) BEGIN
           READ_2DA_ENTRY i 0 3 number
           PATCH_IF (number >=164 && number <=187) BEGIN
              SET to_add=$icon_strref("%number%")
              SET_2DA_ENTRY i 1 3 to_add
           END
        END

END
