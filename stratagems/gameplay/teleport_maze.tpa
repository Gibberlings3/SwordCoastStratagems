DEFINE_ACTION_FUNCTION ~teleport_maze~ BEGIN //legacy (basically)
     OUTER_SPRINT local_loc teleport_maze

     COPY_EXISTING ~ar3007.are~ ~override~
         READ_LONG 0x5c ~exit_off~
	 READ_SHORT 0x5a ~exit_num~
	 FOR (i=0;i<~exit_num~;i=i+1) BEGIN
	    READ_ASCII ~exit_off~+~i~*0xc4 ~exitname~ (9)
	    PATCH_IF ~%exitname%~ STRING_EQUAL_CASE ~tran3007a~ BEGIN
	           WRITE_ASCII 0x7c+~exit_off~+~i~*0xc4 ~TPKNI1~
	    END
	    PATCH_IF ~%exitname%~ STRING_EQUAL_CASE ~tran3007b~ BEGIN
	           WRITE_ASCII 0x7c+~exit_off~+~i~*0xc4 ~TPKNI2~
	    END
         END

      COPY_EXISTING ~ar3014.are~ ~override~
        REPLACE_TEXTUALLY CASE_INSENSITIVE ~TP3003~ ~TP3007~

      ACTION_FOR_EACH ~area~ IN ar3005 ar3010 ar3008 ar3009 ar3011 BEGIN
        COPY_EXISTING ~%area%.are~ ~override~
          REPLACE_TEXTUALLY CASE_INSENSITIVE ~TP3003B~ ~TP3003~ (7)
          REPLACE_TEXTUALLY CASE_INSENSITIVE ~TP3003C~ ~TP3003~ (7)
          REPLACE_TEXTUALLY CASE_INSENSITIVE ~TP3014B~ ~TP3014~ (7)
      END


      COPY ~%scsroot%/%component_loc%/%local_loc%/maze0.2da~ ~override~
           READ_2DA_ENTRIES_NOW ~maze_entry_old~ 0
           FOR (i=1;i<~maze_entry_old~;i=i+1) BEGIN
                READ_2DA_ENTRY_FORMER ~maze_entry_old~ ~i~ 0 ~codename~
                READ_2DA_ENTRY_FORMER ~maze_entry_old~ ~i~ 1 ~code~
                SPRINT $codemap(~%codename%~) ~%code%~
                SPRINT $arealist(~%i%~) ~%codename%~
                FOR (j=1;j<=4;j=j+1) BEGIN
                   SET ~entry~=~j~+1
                   READ_2DA_ENTRY_FORMER ~maze_entry_old~ ~i~ ~entry~ ~temp~
                   SPRINT $exit_old(~%codename%~ ~%j%~) ~%temp%~
                END
           END
           SET ~areanum~=~maze_entry_old~
      BUT_ONLY

 /*  //this is just test code, used to check we've read in the right stuff
      OUTER_FOR (i=1;i<~areanum~;i=i+1) BEGIN
         OUTER_SPRINT ~areaname~ $arealist(~%i%~)
         OUTER_SPRINT ~areacode~ $codemap(~%areaname%~)
         OUTER_SPRINT ~temp~ ~~
         OUTER_FOR (j=1;j<=4;j=j+1) BEGIN
            OUTER_SPRINT ~temp2~ $exit_old(~%areaname%~ ~%j%~)
            OUTER_SPRINT ~temp~ ~%temp%~^~%temp2%~
         END
	 PRINT ~%areaname% %areacode% %temp%~
      END
*/


      LAF check_ini STR_VAR ini=teleport_maze_number RET mazenum=value END
      ACTION_IF mazenum=0 BEGIN
         OUTER_SET ~mazenum~=RANDOM(1 3)
      END
      LAF make_label STR_VAR label= ~dw#mazenum%mazenum%~ END


      COPY ~%scsroot%/%component_loc%/%local_loc%/maze%mazenum%.2da~ ~override~
           READ_2DA_ENTRIES_NOW ~maze_entry_new~ 0
           FOR (i=1;i<~maze_entry_new~;i=i+1) BEGIN
                READ_2DA_ENTRY_FORMER ~maze_entry_new~ ~i~ 0 ~codename~
                FOR (j=1;j<=4;j=j+1) BEGIN
                   READ_2DA_ENTRY_FORMER ~maze_entry_new~ ~i~ ~j~ ~temp~
                   SPRINT ~temp2~ $codemap(~%temp%~)
                   SPRINT $exit_new(~%codename%~ ~%j%~) ~%temp2%~
                END
	   END
      BUT_ONLY

/*
 //  this is just test code, used to check we've read in the right stuff
      OUTER_FOR (i=1;i<~areanum~;i=i+1) BEGIN
         OUTER_SPRINT ~areaname~ $arealist(~%i%~)
         OUTER_SPRINT ~areacode~ $codemap(~%areaname%~)
         OUTER_SPRINT ~temp~ ~~
         OUTER_FOR (j=1;j<=4;j=j+1) BEGIN
            OUTER_SPRINT ~temp2~ $exit_new(~%areaname%~ ~%j%~)
            OUTER_SPRINT ~temp~ ~%temp%~^~%temp2%~
         END
	 PRINT ~%areaname% %areacode% %temp%~
      END
*/

      OUTER_FOR (i=1;i<~areanum~;i=i+1) BEGIN
         OUTER_SPRINT ~areaname~ $arealist(~%i%~)
         OUTER_SPRINT ~areacode~ $codemap(~%areaname%~)
         ACTION_IF ~%areaname%~ STRING_COMPARE_CASE ~NULL~ AND ~%areaname%~ STRING_COMPARE_CASE ~EXIT~ BEGIN
           COPY_EXISTING ~AR%areacode%.are~ ~override~
             READ_LONG 0x5c ~exit_off~
	     READ_SHORT 0x5a ~exit_num~
	     FOR (j=0;j<~exit_num~;j=j+1) BEGIN
	     	 READ_ASCII 0x7c+~exit_off~+~j~*0xc4 ~oldscript~
//	     	 PATCH_PRINT ~%oldscript%~
	     	 FOR (k=1;k<=4;k=k+1) BEGIN
                     SPRINT ~temp~ $exit_old(~%areaname%~ ~%k%~)
                     SPRINT ~temp~ ~TP%temp%~
 //                    PATCH_PRINT ~comparing with %temp%~
                     PATCH_IF ~%temp%~ STRING_EQUAL_CASE ~%oldscript%~ BEGIN
                         SPRINT ~temp2~ $exit_new(~%areaname%~ ~%k%~)
                         SPRINT ~newscript~ ~TP%temp2%~
//                         PATCH_PRINT ~swapping %oldscript% for %newscript%~
			 WRITE_ASCIIE 0x7c+~exit_off~+~j~*0xc4 ~%newscript%~
			 SET ~k~=5
                     END
		 END
     	     END
           BUT_ONLY
         END
      END

      COPY_EXISTING ~plot02f.itm~ ~override~
          SAY 0x54 @4200

END
