DEFINE_ACTION_FUNCTION INSERT_SCRIPT_BLOCK
INT_VAR insert_above=0
        only_once=0
        recompile=1 // debugging only
STR_VAR script=""
        match_function=""
        match=""
        match1=""
        match2=""
        match3=""
        match4=""
        match5=""
        insert=""
BEGIN
   // sanity check
   COPY - "%insert%" override EVALUATE_BUFFER
       READ_ASCII 0x0 internal_insert_data (BUFFER_LENGTH)
       PATCH_TRY COMPILE_BAF_TO_BCS WITH DEFAULT
          PATCH_PRINT ~"%insert%" is not a legal BAF file, INSERT_SCRIPT_BLOCK will fail~
          PATCH_RERAISE
       END
   BUT_ONLY
   OUTER_SPRINT internal_insert_data "%internal_insert_data%"^"%WNL%"
   LAF internal_script_block_master 
     INT_VAR only_once insert_above
     STR_VAR internal_insert_data script match_function
           match match1 match2 match3 match4 match5
           type=insert 
   END
END

DEFINE_ACTION_FUNCTION REPLACE_SCRIPT_BLOCK
INT_VAR insert_above=0
        only_once=0
        recompile=1 // debugging only
        replace=1
STR_VAR script=""
        match_function=""
        match=""
        match1=""
        match2=""
        match3=""
        match4=""
        match5=""
        insert=""
BEGIN
   // sanity check
   COPY - "%insert%" override EVALUATE_BUFFER
       READ_ASCII 0x0 internal_insert_data (BUFFER_LENGTH)
       PATCH_TRY COMPILE_BAF_TO_BCS WITH DEFAULT
          PATCH_PRINT ~"%insert%" is not a legal BAF file, INSERT_SCRIPT_BLOCK will fail~
          PATCH_RERAISE
       END
   BUT_ONLY
   OUTER_SPRINT internal_insert_data "%internal_insert_data%"^"%WNL%"
   LAF internal_script_block_master 
     INT_VAR only_once insert_above replace
     STR_VAR internal_insert_data script match_function
           match match1 match2 match3 match4 match5
           type=insert 
   END
END


DEFINE_ACTION_FUNCTION DELETE_SCRIPT_BLOCK
INT_VAR only_once=0
STR_VAR script=""
        match_function=""
        match=""
        match1=""
        match2=""
        match3=""
        match4=""
        match5=""
BEGIN
   LAF internal_script_block_master INT_VAR only_once STR_VAR script match_function match match1 match2 match3 match4 match5 type=delete END
END

DEFINE_ACTION_FUNCTION CLONE_SCRIPT_BLOCK
INT_VAR insert_above=0
        only_once=0
        recompile=1
STR_VAR script=""
        patch=""
        patch_original=""
        match_function=""
        match=""
        match1=""
        match2=""
        match3=""
        match4=""
        match5=""
        swap_out=""
        swap_out1=""
        swap_out2=""
        swap_out3=""
        swap_out4=""
        swap_out5=""
        swap_in=""
        swap_in1=""
        swap_in2=""
        swap_in3=""
        swap_in4=""
        swap_in5=""
        original_swap_out=""
        original_swap_out1=""
        original_swap_out2=""
        original_swap_out3=""
        original_swap_out4=""
        original_swap_out5=""
        original_swap_in=""
        original_swap_in1=""
        original_swap_in2=""
        original_swap_in3=""
        original_swap_in4=""
        original_swap_in5=""
BEGIN
   LAF internal_script_block_master
     INT_VAR only_once insert_above
     STR_VAR script match_function patch patch_original
           match match1 match2 match3 match4 match5 
           swap_out swap_out1 swap_out2 swap_out3 swap_out4 swap_out5
           swap_in swap_in1 swap_in2 swap_in3 swap_in4 swap_in5
           original_swap_out original_swap_out1 original_swap_out2 original_swap_out3 original_swap_out4 original_swap_out5
           original_swap_in original_swap_in1 original_swap_in2 original_swap_in3 original_swap_in4 original_swap_in5
           type=clone
   END
END


DEFINE_ACTION_FUNCTION ALTER_SCRIPT_BLOCK
INT_VAR only_once=0
        recompile=1
STR_VAR script=""
        patch=""
        match_function=""
        match=""
        match1=""
        match2=""
        match3=""
        match4=""
        match5=""
        swap_out=""
        swap_out1=""
        swap_out2=""
        swap_out3=""
        swap_out4=""
        swap_out5=""
        swap_in=""
        swap_in1=""
        swap_in2=""
        swap_in3=""
        swap_in4=""
        swap_in5=""
BEGIN
   LAF internal_script_block_master
     INT_VAR only_once recompile
     STR_VAR script match_function patch
           match match1 match2 match3 match4 match5 
           swap_out swap_out1 swap_out2 swap_out3 swap_out4 swap_out5
           swap_in swap_in1 swap_in2 swap_in3 swap_in4 swap_in5
           type=alter
   END
END


DEFINE_ACTION_FUNCTION internal_script_block_master
INT_VAR insert_above=0
        only_once=0
        recompile=1
        replace=0
STR_VAR script=""
        patch=""
        patch_original=""
        match_function=""
        match=""
        match1=""
        match2=""
        match3=""
        match4=""
        match5=""
        internal_type=""
        internal_insert_data=""
        swap_out=""
        swap_out1=""
        swap_out2=""
        swap_out3=""
        swap_out4=""
        swap_out5=""
        swap_in=""
        swap_in1=""
        swap_in2=""
        swap_in3=""
        swap_in4=""
        swap_in5=""
        original_swap_out=""
        original_swap_out1=""
        original_swap_out2=""
        original_swap_out3=""
        original_swap_out4=""
        original_swap_out5=""
        original_swap_in=""
        original_swap_in1=""
        original_swap_in2=""
        original_swap_in3=""
        original_swap_in4=""
        original_swap_in5=""
BEGIN
COPY_EXISTING "%script%.bcs" "override"
     SET found_match=0
     SPRINT new_script ""
     SET start=INDEX_BUFFER("CR")
     WHILE start>0 BEGIN
          SET end=INDEX_BUFFER ("RS%LNL%CR%LNL%")
          SET length=(end - start) + 6
          READ_ASCII start data (length)
          DELETE_BYTES start length
          INNER_PATCH_SAVE data "SC%LNL%%data%SC%LNL%" BEGIN
             DECOMPILE_BCS_TO_BAF
             SET proceed=0
             PATCH_IF (!found_match || !only_once) BEGIN
              PATCH_IF "%match_function%" STRING_COMPARE "" BEGIN
                READ_ASCII 0x0 data_temp (BUFFER_LENGTH)  // we do this to avoid side-effects
                INNER_PATCH "%data_temp%" BEGIN
                    LPF "%match_function%" RET v_func=value END
                END
              END ELSE BEGIN
                SET v_func=1
              END
              PATCH_IF
             ( INDEX_BUFFER ("%match%")>=0     AND
               INDEX_BUFFER ("%match1%")>=0    AND
               INDEX_BUFFER ("%match2%")>=0    AND
               INDEX_BUFFER ("%match3%")>=0    AND
               INDEX_BUFFER ("%match4%")>=0    AND
               INDEX_BUFFER ("%match5%")>=0    AND
               v_func=1
              )
              BEGIN
                SET proceed=1
              END
             END
             PATCH_IF proceed BEGIN
                 SET found_match=1
                 PATCH_MATCH "%type%" WITH
                 alter BEGIN
                     PATCH_IF "%patch%" STRING_COMPARE "" BEGIN LPF "%patch%" END END
                     PATCH_IF "%swap_out%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%swap_out%" "%swap_in%" END
                     PATCH_IF "%swap_out1%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%swap_out1%" "%swap_in1%" END
                     PATCH_IF "%swap_out2%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%swap_out2%" "%swap_in2%" END
                     PATCH_IF "%swap_out3%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%swap_out3%" "%swap_in3%" END
                     PATCH_IF "%swap_out4%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%swap_out4%" "%swap_in4%" END
                     PATCH_IF "%swap_out5%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%swap_out5%" "%swap_in5%" END
                 END
                 clone BEGIN
                    READ_ASCII 0x0 data2 (BUFFER_LENGTH)
                    INNER_PATCH_SAVE data2 "%data2%" BEGIN
                       PATCH_IF "%patch%" STRING_COMPARE "" BEGIN LPF "%patch%" END END
                       PATCH_IF "%swap_out%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%swap_out%" "%swap_in%" END
                       PATCH_IF "%swap_out1%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%swap_out1%" "%swap_in1%" END
                       PATCH_IF "%swap_out2%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%swap_out2%" "%swap_in2%" END
                       PATCH_IF "%swap_out3%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%swap_out3%" "%swap_in3%" END
                       PATCH_IF "%swap_out4%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%swap_out4%" "%swap_in4%" END
                       PATCH_IF "%swap_out5%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%swap_out5%" "%swap_in5%" END
                    END
                    PATCH_IF "%patch_original%" STRING_COMPARE "" BEGIN LPF "%patch_original%" END END
                    PATCH_IF "%original_swap_out%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%original_swap_out%" "%original_swap_in%" END
                    PATCH_IF "%original_swap_out1%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%original_swap_out1%" "%original_swap_in1%" END
                    PATCH_IF "%original_swap_out2%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%original_swap_out2%" "%original_swap_in2%" END
                    PATCH_IF "%original_swap_out3%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%original_swap_out3%" "%original_swap_in3%" END
                    PATCH_IF "%original_swap_out4%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%original_swap_out4%" "%original_swap_in4%" END
                    PATCH_IF "%original_swap_out5%" STRING_COMPARE "" BEGIN REPLACE_TEXTUALLY "%original_swap_out5%" "%original_swap_in5%" END
                    PATCH_IF insert_above BEGIN
                       SET insert_point=0
                    END ELSE BEGIN
                       SET insert_point=BUFFER_LENGTH
                    END
                    INSERT_BYTES insert_point (STRING_LENGTH "%data2%")
                    WRITE_ASCIIE insert_point "%data2%"
                 END
                 delete BEGIN
                    DELETE_BYTES 0x0 BUFFER_LENGTH
                 END
                 insert BEGIN
                    PATCH_IF replace BEGIN
                       DELETE_BYTES 0x0 BUFFER_LENGTH
                    END
                    PATCH_IF insert_above BEGIN
                       SET insert_point=0
                    END ELSE BEGIN
                       SET insert_point=BUFFER_LENGTH
                    END
                    INSERT_BYTES insert_point (STRING_LENGTH "%internal_insert_data%")
                    WRITE_ASCIIE insert_point "%internal_insert_data%"
                 END
                 DEFAULT
                    PATCH_FAIL "internal error in ALTER_SCRIPT suite"
                 END
             END
          END
          SPRINT new_script "%new_script%%data%"
          SET start=INDEX_BUFFER("CR")
     END
     DELETE_BYTES 0x0 BUFFER_LENGTH
     INNER_PATCH_SAVE new_script "%new_script%" BEGIN
        PATCH_IF recompile BEGIN
           COMPILE_BAF_TO_BCS
        END
        SET new_length=BUFFER_LENGTH
     END
     INSERT_BYTES 0x0 new_length
     WRITE_ASCIIE 0x0 "%new_script%"
BUT_ONLY
END

