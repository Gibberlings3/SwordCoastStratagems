// background assumptions:
// %UPPER_CASE_HLA_ID% is the file resref
// $hla_type(UPPER_CASE_HLA_ID) is grant/apply

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///          main patch
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION grant_hlas
    INT_VAR spellcaster=0
            force_level=0
            hard_minimum=12
    STR_VAR class=""
            kit=""
            resref=""
    RET hla has_hlas
BEGIN
  // hardcoded skip
  PATCH_IF (BYTE_AT 0x234 < hard_minimum) && (BYTE_AT 0x235 < hard_minimum) BEGIN
          SET has_hlas=0
          SPRINT hla ""
  END ELSE BEGIN
    PATCH_IF !VARIABLE_IS_SET hla_choices_already_read BEGIN
       INNER_ACTION BEGIN
          LAM read_in_hla_choices
       END
    END
    LPF hla_class_breakdown STR_VAR class RET classlist num_classes_total END
    SET class_number=0
    SPRINT hlas_to_add ""
    WHILE "%classlist%" STRING_COMPARE "" BEGIN
       SET class_number +=1
       LPF return_first_entry STR_VAR list="%classlist%" RET this_class=entry classlist=list END
       LPF number_of_hlas INT_VAR force_level num_classes_total class_number STR_VAR class="%this_class%" RET num_hla END
       LPF determine_hlas INT_VAR spellcaster STR_VAR class="%this_class%" kit resref RET hla_list END
       LPF add_elements_to_list INT_VAR number_to_add=num_hla STR_VAR list="%hlas_to_add%" elements="%hla_list%" RET hlas_to_add=list END
    END
    PATCH_IF "%hlas_to_add%" STRING_COMPARE "" BEGIN
       LPF delete_hlas END
       LPF give_hlas STR_VAR hlas_to_add END
    END ELSE BEGIN
    END
    INNER_PATCH_SAVE hla "%hlas_to_add%" BEGIN
       REPLACE_TEXTUALLY ~"~ ~~ 
       REPLACE_TEXTUALLY "~" ""
    END
    PATCH_IF "%hla%" STRING_EQUAL_CASE "" BEGIN
       SET has_hlas=0
    END ELSE BEGIN
       SET has_hlas=1
    END
  END
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///          select which hlas to hand out
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION determine_hlas
    INT_VAR spellcaster=0
    STR_VAR class="" kit="" resref=""
    RET hla_list
BEGIN
//  PATCH_PRINT "Considering HLAs for class %class%, kit %kit%..."
  PATCH_MATCH "%class%" WITH
     MAGE CLERIC SHAMAN BARD DRUID SORCERER BEGIN
        SET continue=spellcaster
     END
     DEFAULT
        SET continue=!spellcaster
  END
  PATCH_IF continue BEGIN
    TO_UPPER kit
    TO_UPPER resref
    PATCH_IF VARIABLE_IS_SET $hla_allocation_list_count("%kit%") BEGIN
       SET max=$hla_allocation_list_count("%kit%")
       PATCH_IF VARIABLE_IS_SET $hla_override("%resref%" "%kit%") BEGIN
          SET number = $hla_override("%resref%" "%kit%")
       END ELSE BEGIN
          PATCH_RANDOM_SEED 3.14
          SET number = RANDOM (1 max)
       END
       SPRINT hla_list $hla_allocation_list("%kit%" "%number%")
    END ELSE BEGIN
       PATCH_IF "%class%" STRING_EQUAL_CASE "%kit%" BEGIN
          SPRINT hla_list ""
       END ELSE BEGIN
          LPF determine_hlas INT_VAR spellcaster STR_VAR class kit="%class%" resref RET hla_list END
       END
    END
  END ELSE BEGIN
     SPRINT hla_list ""
 //    PATCH_PRINT "...skipping"
  END
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///          take as input a class entry; return all the classes the creature has, and how many there are (check the CRE file to see about dualclassing)
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION hla_class_breakdown
    STR_VAR class=""
    RET classlist num_classes_total
BEGIN
    INNER_PATCH_SAVE classlist "%class%" BEGIN
       REPLACE_TEXTUALLY "_" " "
    END
    LPF length_of_list STR_VAR list=classlist RET num_classes_total=value END
    // handle dual-classing
    PATCH_IF num_classes_total>1 BEGIN
       LPF CRE_read_race RET race=value END
       PATCH_IF "%race%" STRING_EQUAL_CASE HUMAN BEGIN
          SPRINT list_temp "%classlist%"
          SPRINT classlist ""
          SET num_classes_total=1
          WHILE "%list_temp%" STRING_COMPARE "" BEGIN
             LPF return_first_entry STR_VAR list="%list_temp%" RET entry list_temp=list END
             TO_LOWER entry
             LPF "CRE_read_original_class_%entry%" RET value END
             PATCH_IF !value BEGIN
                SPRINT classlist "%entry%"
             END
          END
       END
    END
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///          work out how many hlas the creature should have in the relevant class
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


DEFINE_PATCH_FUNCTION number_of_hlas
    INT_VAR num_classes_total=1
            class_number=1
            force_level=0
    STR_VAR class=""
    RET num_hla
BEGIN
    PATCH_IF force_level>0 BEGIN
        SET level=force_level
    END ELSE BEGIN
        LPF "CRE_read_level%class_number%" RET level=value END
    END
    LPF hla_level_minimum INT_VAR num_classes=num_classes_total STR_VAR class RET minimum END
    SET num_hla = (level >= minimum) ? (level + 1 - minimum) : 0
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///          actually hand out the hlas
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION give_hlas
    STR_VAR hlas_to_add=""
BEGIN
 PATCH_IF "%hlas_to_add%" STRING_COMPARE "" BEGIN
   LPF return_first_entry STR_VAR list="%hlas_to_add%" RET hla=entry hlas_to_add=list END
   SPRINT type $hla_type("%hla%")
   PATCH_MATCH "%type%" WITH
   grant BEGIN
         SPRINT resref EVAL "%%hla%%"
         LPF CRE_add_spells STR_VAR arguments=~%resref%~ END
   END
   apply BEGIN
         LPF apply_hla STR_VAR hla END
   END
   DEFAULT
      LPF warning STR_VAR warning="unrecognised HLA: %hla%" END
   END
   LPF give_hlas STR_VAR hlas_to_add END
 END
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///          manual code to assign those hlas that aren't grant type
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


DEFINE_PATCH_FUNCTION apply_hla
    STR_VAR hla=""
BEGIN
   PATCH_MATCH "%hla%" WITH
   WARRIOR_GREATER_WHIRLWIND BEGIN
      LPF set_hla_upgrade_var STR_VAR id=DW_POWER_UPGRADE7 END
   END
   EXTRA_LEVEL_6 EXTRA_LEVEL_7 EXTRA_LEVEL_8 BEGIN
        // we don't bother implementing this in code
   END
   DEFAULT
      LPF warning STR_VAR warning="Trying to apply HLA %hla% but I don't have code for it" END
   END
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///          helper function for apply_hla
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION set_hla_upgrade_var
   STR_VAR id=""
BEGIN
   INNER_ACTION BEGIN
       LAF ds_resolve_stat INT_VAR ids=1 STR_VAR id RET stat_ind END
   END
   PATCH_MAKE_PATCH
      add_effect_inline=>~target=>1 timing=>9 opcode=>328 parameter2=>%stat_ind% mode=>1~
   END
   LPF apply_patches STR_VAR edits=patch_data file_ext=CRE END
END



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///         delete all extant hlas (insensitive to wizard/priest hlas)
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION delete_hlas BEGIN
       SPRINT to_delete ""
       PHP_EACH hla_type AS ids=>null BEGIN
          TO_UPPER ids
          PATCH_IF $hla_spelltype("%ids%")=4 BEGIN
             SPRINT resref EVALUATE_BUFFER "%%ids%%"
             PATCH_IF INDEX_BUFFER ("%resref%")>=0 BEGIN
                REMOVE_MEMORIZED_SPELL "%resref%"
             END
          END
       END
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///          macro to read in all the various hla choices
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_MACRO read_in_hla_choices
BEGIN
   LOCAL_SPRINT kit ""
   LOCAL_SPRINT list ""
   LOCAL_SET rowcount=0
   ACTION_IF !VARIABLE_IS_SET hla_choices_already_read BEGIN
         OUTER_SET hla_choices_already_read=1
         ACTION_FOR_EACH localroot IN genai mage priest BEGIN
           ACTION_BASH_FOR "%scsroot%/%localroot%/hla_choices/%base_folder_hlas%" ".*\.2da" BEGIN
              OUTER_SPRINT kit "%BASH_FOR_RES%"
              ACTION_TO_UPPER kit
              ACTION_IF "%kit%" STRING_EQUAL_CASE override BEGIN
                COPY "%scsroot%/%localroot%/hla_choices/%base_folder_hlas%/%kit%.2da" "%workspace%"
                   COUNT_2DA_ROWS 3 rowcount
                   FOR (row=1;row<rowcount;row+=1) BEGIN
                        READ_2DA_ENTRY row 0 3 cre
                        READ_2DA_ENTRY row 1 3 kit
                        READ_2DA_ENTRY row 2 3 code
                        TO_UPPER cre
                        TO_UPPER kit
                        SET $hla_override("%cre%" "%kit%")=code
                   END
                BUT_ONLY
              END ELSE BEGIN
               ACTION_IF !enhanced_edition BEGIN
                  ACTION_MATCH "%kit%" WITH blackguard dwarven_defender BEGIN
                     OUTER_SET proceed=0
                  END
                  DEFAULT
                     OUTER_SET proceed=1
                  END
               END ELSE BEGIN
                  OUTER_SET proceed=1
               END
               ACTION_IF proceed BEGIN
                COPY "%scsroot%/%localroot%/hla_choices/%base_folder_hlas%/%kit%.2da" "%workspace%"
                   COUNT_2DA_ROWS 0 rowcount
                   FOR (row=1;row<rowcount;row+=1) BEGIN
                       LPF read_rest_of_line INT_VAR row col=1 RET short_list=list END
                       LPF deabbreviate_hla_list STR_VAR short_list RET list END
                       SPRINT $hla_allocation_list("%kit%" "%row%") "%list%"
                   END
                   SET $hla_allocation_list_count("%kit%")=rowcount - 1
                BUT_ONLY
               END
              END
           END
         END
   END
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///         deabbreviate a HLA, i.e. add the WIZARD_ (etc.) prefix
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION deabbreviate_hla
   STR_VAR short_hla=""
   RET hla
BEGIN
   PATCH_IF VARIABLE_IS_SET $hla_type("%short_hla%") BEGIN
      SPRINT hla "%short_hla%"
   END ELSE BEGIN
      SET found_already=0
      SET duplicate=0
      PATCH_FOR_EACH prefix IN PALADIN BLACKGUARD CAVALIER INQUISITOR UNDEAD_HUNTER BARBARIAN DRAGON_DISCIPLE RANGER ARCHER MONK SUN_SOUL DARK_MOON
                               SWASHBUCKLER BARD BLADE SKALD JESTER HELM TALOS TYR LATHANDER DRUID AVENGER SHAPESHIFTER TYR WIZARD_SLAYER KENSAI ASSASSIN
                               DWARVEN_DEFENDER BOUNTY_HUNTER WARRIOR WIZARD CLERIC ROGUE
      BEGIN
         PATCH_IF VARIABLE_IS_SET $hla_type("%prefix%_%short_hla%") BEGIN
                  SPRINT hla "%prefix%_%short_hla%"
                  PATCH_IF found_already BEGIN
                     SET duplicate=1
                  END ELSE BEGIN
                     SET found_already=1
                  END
         END
      END
      PATCH_IF duplicate BEGIN
         LPF warning STR_VAR warning="abbreviated HLA %short_hla% is ambiguous; defaulting to %hla%" END
      END
   END
   PATCH_IF !VARIABLE_IS_SET hla BEGIN
      SPRINT hla "%short_hla%" 
      LPF warning STR_VAR warning="unrecognised HLA %hla%" END
   END
END

DEFINE_PATCH_FUNCTION deabbreviate_hla_list
   STR_VAR short_list=""
           list=""
   RET list
BEGIN
   PATCH_IF "%short_list%" STRING_COMPARE_CASE "" BEGIN
      LPF return_first_entry STR_VAR list="%short_list%" RET short_hla=entry short_list=list END
      LPF deabbreviate_hla STR_VAR short_hla RET hla END
      SPRINT list "%list% %hla%"
      LPF deabbreviate_hla_list STR_VAR short_list list RET list END
   END
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///         work out the level at which a given class starts getting hlas (hardcoded)
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION hla_level_minimum
   INT_VAR num_classes=0
   STR_VAR class=""
   RET minimum
BEGIN
   PATCH_MATCH "%class%" WITH
      FIGHTER BEGIN
           PATCH_IF num_classes=3 BEGIN
                SET minimum=12
           END ELSE
           PATCH_IF num_classes=2 BEGIN
                SET minimum=14
           END ELSE BEGIN
                SET minimum=20
           END
      END
      RANGER BEGIN
           PATCH_IF num_classes=2 BEGIN
               SET minimum=14
           END ELSE BEGIN
               SET minimum=18
           END
      END
      PALADIN BEGIN
            SET minimum=18
      END
      MONK BEGIN
           SET minimum=22
      END
      THIEF BEGIN
           PATCH_IF num_classes=3 BEGIN
                SET minimum=15
           END ELSE
           PATCH_IF num_classes=2 BEGIN
                SET minimum=17
           END ELSE BEGIN
                SET minimum=24
           END
      END
      BARD BEGIN
           SET minimum=24
      END
      MAGE BEGIN
           PATCH_IF num_classes=3 BEGIN
                SET minimum=13
           END ELSE
           PATCH_IF num_classes=2 BEGIN
                SET minimum=14
           END ELSE BEGIN
                SET minimum=18
           END
      END
      SORCERER BEGIN
           SET minimum=18
      END
      CLERIC BEGIN
           PATCH_IF num_classes=3 BEGIN
                 SET minimum=13
           END ELSE
           PATCH_IF num_classes=2 BEGIN
                 SET minimum=15
           END ELSE BEGIN
                 SET minimum=22
           END
      END
      DRUID BEGIN
           PATCH_IF num_classes=2 BEGIN
                 SET minimum=14
           END ELSE BEGIN
                 SET minimum=15
           END
      END
      SHAMAN BEGIN 
          SET minimum=18
      END
      SAHUAGIN BEGIN
          SET minimum=999
      END
      DEFAULT
           SET minimum=999
   END
END
